{"version":3,"file":"default-node_modules_angular_material_fesm2020_slide-toggle_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2020/slide-toggle.mjs"],"sourcesContent":["import * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Inject, Optional, ViewChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false }),\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true,\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\nclass _MatSlideToggleBase extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode, idPrefix) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.color = this.defaultColor = defaults.color || 'accent';\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    ngAfterContentInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._focused = true;\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's ng-touched) will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._focused = false;\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(this._createChangeEvent(this.checked));\n    }\n}\n_MatSlideToggleBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatSlideToggleBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: _MatSlideToggleBase, inputs: { name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { name: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], required: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], toggleChange: [{\n                type: Output\n            }] } });\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleBase {\n    constructor(elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode) {\n        super(elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode, 'mat-slide-toggle-');\n    }\n    _createChangeEvent(isChecked) {\n        return new MatSlideToggleChange(this, isChecked);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggle, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: 'tabindex', attribute: true }, { token: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSlideToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSlideToggle, selector: \"mat-slide-toggle\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.name\": \"null\", \"class.mat-checked\": \"checked\", \"class.mat-disabled\": \"disabled\", \"class.mat-slide-toggle-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_noopAnimations\" }, classAttribute: \"mat-slide-toggle\" }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }], exportAs: [\"matSlideToggle\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <span class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <span class=\\\"mat-slide-toggle-thumb-container\\\">\\n      <span class=\\\"mat-slide-toggle-thumb\\\"></span>\\n      <span class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <span class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></span>\\n      </span>\\n    </span>\\n\\n  </span>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"directive\", type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                        'class': 'mat-slide-toggle',\n                        '[id]': 'id',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.name]': 'null',\n                        '[class.mat-checked]': 'checked',\n                        '[class.mat-disabled]': 'disabled',\n                        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                    }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <span class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <span class=\\\"mat-slide-toggle-thumb-container\\\">\\n      <span class=\\\"mat-slide-toggle-thumb\\\"></span>\\n      <span class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <span class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></span>\\n      </span>\\n    </span>\\n\\n  </span>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatSlideToggleRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSlideToggleRequiredValidator, selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\", providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                    providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatSlideToggleRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] });\n_MatSlideToggleRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatSlideToggleRequiredValidator],\n                    declarations: [MatSlideToggleRequiredValidator],\n                }]\n        }] });\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSlideToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, declarations: [MatSlideToggle], imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule], exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule] });\nMatSlideToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, imports: [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        _MatSlideToggleRequiredValidatorModule,\n                        MatRippleModule,\n                        MatCommonModule,\n                        ObserversModule,\n                    ],\n                    exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n                    declarations: [MatSlideToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleBase, _MatSlideToggleRequiredValidatorModule };\n"],"names":["i3","ObserversModule","i0","InjectionToken","forwardRef","EventEmitter","Directive","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Inject","Optional","ViewChild","NgModule","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","i1","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","_MatSlideToggleMixinBase","_elementRef","_MatSlideToggleBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","animationMode","idPrefix","_onChange","_","_onTouched","_required","_checked","name","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","color","defaultColor","_noopAnimations","id","_uniqueId","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","_focused","Promise","resolve","then","ngOnDestroy","stopMonitoring","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","toggle","_emitChangeEvent","emit","_createChangeEvent","ɵfac","ɵdir","type","ElementRef","FocusMonitor","ChangeDetectorRef","undefined","args","ariaDescribedby","focusMonitor","changeDetectorRef","isChecked","_onChangeEvent","event","stopPropagation","_inputElement","nativeElement","_onInputClick","focus","options","origin","focusVia","_onLabelTextChange","detectChanges","ɵcmp","MatRipple","CdkObserveContent","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","decorators","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatSlideToggleModule","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}