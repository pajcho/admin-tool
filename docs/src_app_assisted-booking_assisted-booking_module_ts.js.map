{"version":3,"file":"src_app_assisted-booking_assisted-booking_module_ts.js","mappings":"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","sources":["./src/app/assisted-booking/assisted-booking.component.ts","./src/app/assisted-booking/assisted-booking.component.html","./src/app/assisted-booking/assisted-booking.module.ts","./src/app/assisted-booking/assisted-booking.routing.ts","./src/app/assisted-booking/flight-destination.component.ts","./src/app/assisted-booking/flight-destination.component.html","./src/app/assisted-booking/flight-details.component.ts","./src/app/assisted-booking/flight-details.component.html","./src/app/assisted-booking/product-details-form.component.ts","./src/app/assisted-booking/product-details-form.component.html","./src/app/assisted-booking/product-details.component.ts","./src/app/assisted-booking/product-details.component.html","./src/app/assisted-booking/product-updates.component.ts","./src/app/assisted-booking/product-updates.component.html","./src/app/assisted-booking/validate-pnr.component.ts","./src/app/assisted-booking/validate-pnr.component.html","./src/app/effects/checkout.effects.ts","./src/app/effects/cost-center.effects.ts","./src/app/effects/payment.effects.ts","./src/app/effects/pnr.effects.ts","./src/app/models/employee.model.ts","./src/app/services/checkout.service.ts","./src/app/services/cost-center.service.ts","./src/app/services/employee.service.ts","./src/app/services/payment.service.ts","./src/app/services/pnr.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { BehaviorSubject, combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, mergeMap, take, takeWhile, tap, withLatestFrom } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { companiesLoading, selectCompanyById } from '../reducers/companies.reducer';\nimport { companyUsersLoading, getSelectedCompanyUser } from '../reducers/company-users.reducer';\nimport { AppState } from '../reducers';\nimport { CompanyActions } from '../actions/companies.actions';\nimport { CompanyUserActions } from '../actions/company-users.actions';\nimport { BaseComponent } from '../base.component';\nimport { CompanyModel } from '../models/company.model';\nimport { selectPNRData } from '../reducers/pnr.reducer';\nimport { FlightPNRValidationModel } from '../models/pnr.model';\nimport { PnrActions } from '../actions/pnr.actions';\n\n@Component({\n  selector: 'app-assisted-booking',\n  templateUrl: './assisted-booking.component.html',\n})\nexport class AssistedBookingComponent extends BaseComponent implements OnInit {\n  activeStep$ = new BehaviorSubject<'validate' | 'details' | 'updates'>('validate');\n\n  company$: Observable<CompanyModel>;\n  companyUser$ = this.store.select(getSelectedCompanyUser).pipe(filter((user) => !!user?.id));\n\n  // Show initial loader until both company and company user details are completely loaded\n  firstTimeLoading$ = combineLatest([this.store.select(companiesLoading), this.store.select(companyUsersLoading)]).pipe(\n    takeWhile(([companyLoading, companyUserLoading]) => {\n      return companyLoading || companyUserLoading;\n    }, true),\n    map(([companyLoading, companyUserLoading]) => companyLoading || companyUserLoading)\n  );\n\n  validatedPNR$: Observable<FlightPNRValidationModel> = this.store.select(selectPNRData).pipe(\n    distinctUntilChanged((prev, current) => JSON.stringify(prev) === JSON.stringify(current)),\n    tap((pnr) => {\n      // If PNR is validated for the first time, and we are still on the validation\n      // page we want to automatically redirect user to the details page\n      if (pnr.valid && this.activeStep$.getValue() === 'validate') this.goToDetails();\n    })\n  );\n\n  constructor(\n    protected formBuilder: UntypedFormBuilder,\n    private route: ActivatedRoute,\n    private store: Store<AppState>\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    // Load company data if not already in store\n    this.subscriptions.add(\n      this.companyUser$\n        .pipe(\n          filter((user) => !!user?.id),\n          mergeMap((user) => forkJoin([of(user), this.store.select(selectCompanyById(user.companyId)).pipe(take(1))]))\n        )\n        .subscribe(([{ companyId }, company]) => {\n          if (!company?.id || company?.id !== companyId) {\n            // Load company details if we don't have one in store already\n            this.store.dispatch(CompanyActions.loadCompany({ id: companyId }));\n          }\n\n          this.company$ = this.store.select(selectCompanyById(companyId)).pipe(filter((company) => !!company?.id));\n        })\n    );\n\n    // Load company user data if not already in store\n    this.subscriptions.add(\n      this.route.params\n        .pipe(withLatestFrom(this.store.select(getSelectedCompanyUser)))\n        .subscribe(([{ id }, traveller]) => {\n          if (!traveller.id || traveller.id !== id) {\n            this.store.dispatch(CompanyUserActions.loadAndSelectCompanyUser({ id }));\n          }\n        })\n    );\n  }\n\n  goToValidate() {\n    this.activeStep$.next('validate');\n  }\n\n  goToDetails() {\n    this.activeStep$.next('details');\n  }\n\n  goToUpdates() {\n    this.activeStep$.next('updates');\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    this.store.dispatch(PnrActions.resetValidatedPnr());\n  }\n}\n","<dib-wrapper-main>\n  <dib-breadcrumbs>\n    <dib-breadcrumb label=\"Dashboard\" route=\"/\"></dib-breadcrumb>\n    <dib-breadcrumb label=\"Companies\" route=\"/companies\"></dib-breadcrumb>\n    <dib-breadcrumb label=\"Company Users\" route=\"/companies/users\"></dib-breadcrumb>\n    <dib-breadcrumb\n      [label]=\"(companyUser$ | async)?.fullName\"\n      [route]=\"'/companies/users/' + (companyUser$ | async)?.id\"\n      [loading]=\"firstTimeLoading$ | async\"\n    ></dib-breadcrumb>\n    <dib-breadcrumb label=\"Agent Assisted Booking\" route=\"/assisted-booking\"></dib-breadcrumb>\n  </dib-breadcrumbs>\n\n  <dib-wrapper-details [loading]=\"firstTimeLoading$ | async\">\n    <!-- Sidebar tabs -->\n    <ng-container slot=\"tabs\" *ngIf=\"validatedPNR$ | async as pnr\">\n      <dib-wrapper-details-tab [attr.active]=\"(activeStep$ | async) === 'validate'\" (click)=\"goToValidate()\">\n        Validate PNR\n      </dib-wrapper-details-tab>\n      <dib-wrapper-details-tab [class.disabled]=\"!pnr.valid\" type=\"header\">Details</dib-wrapper-details-tab>\n      <dib-wrapper-details-tab [class.disabled]=\"!pnr.valid\" [attr.active]=\"(activeStep$ | async) === 'details'\" (click)=\"goToDetails()\">\n        Product Details\n      </dib-wrapper-details-tab>\n      <dib-wrapper-details-tab\n        *ngIf=\"pnr.valid && pnr.hasUpdates\"\n        [attr.active]=\"(activeStep$ | async) === 'updates'\"\n        (click)=\"goToUpdates()\"\n      >\n        Updates\n        <ng-container slot=\"badge\">{{ pnr.updates.length }}</ng-container>\n      </dib-wrapper-details-tab>\n    </ng-container>\n\n    <ng-container slot=\"content\">\n      <ng-container [ngSwitch]=\"activeStep$ | async\">\n        <ng-template ngSwitchCase=\"validate\">\n          <app-validate-pnr [company]=\"company$ | async\" [booker]=\"companyUser$ | async\"></app-validate-pnr>\n        </ng-template>\n        <ng-template ngSwitchCase=\"details\">\n          <app-product-details\n            [company]=\"company$ | async\"\n            [booker]=\"companyUser$ | async\"\n            [pnr]=\"validatedPNR$ | async\"\n          ></app-product-details>\n        </ng-template>\n        <ng-template ngSwitchCase=\"updates\">\n          <app-product-updates [updates]=\"(validatedPNR$ | async).updates\"></app-product-updates>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n  </dib-wrapper-details>\n</dib-wrapper-main>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { EffectsModule } from '@ngrx/effects';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { AssistedBookingComponent } from './assisted-booking.component';\nimport { routing } from './assisted-booking.routing';\nimport { WrapperMainModule } from '../global/wrapper/main/wrapper-main.module';\nimport { BreadcrumbsModule } from '../global/breadcrumbs/breadcrumbs.module';\nimport { WrapperDetailsModule } from '../global/wrapper/details/wrapper-details.module';\nimport { PNREffects } from '../effects/pnr.effects';\nimport { DotLoaderModule } from '../global/dot-loader/dot-loader.module';\nimport { ValidatePNRComponent } from './validate-pnr.component';\nimport { ProductDetailsComponent } from './product-details.component';\nimport { CostCenterEffects } from '../effects/cost-center.effects';\nimport { FlightDetailsComponent } from './flight-details.component';\nimport { PaymentEffects } from '../effects/payment.effects';\nimport { DibPipesModule } from '../utils/pipes/pipes.module';\nimport { PluralModule } from '../global/plural/plural.module';\nimport { CartTabsModule } from '../bookings/details/cart/cart-tabs.module';\nimport { FlightDestinationComponent } from './flight-destination.component';\nimport { ProductUpdatesComponent } from './product-updates.component';\nimport { ProductDetailsFormComponent } from './product-details-form.component';\nimport { CheckoutEffects } from '../effects/checkout.effects';\nimport { VendorsPaymentProviderEffects } from '../effects/vendor-payment-provider.effects';\nimport { VendorEffects } from '../effects/vendor.effects';\nimport { ProductEffects } from '../effects/product.effects';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    routing,\n    EffectsModule.forFeature([\n      PNREffects,\n      CostCenterEffects,\n      PaymentEffects,\n      CheckoutEffects,\n      VendorsPaymentProviderEffects,\n      ProductEffects,\n      VendorEffects,\n    ]),\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    BreadcrumbsModule,\n    WrapperMainModule,\n    WrapperDetailsModule,\n    DotLoaderModule,\n    DibPipesModule,\n    PluralModule,\n    CartTabsModule,\n    MatRadioModule,\n  ],\n  declarations: [\n    AssistedBookingComponent,\n    ValidatePNRComponent,\n    ProductDetailsComponent,\n    ProductDetailsFormComponent,\n    ProductUpdatesComponent,\n    FlightDetailsComponent,\n    FlightDestinationComponent,\n  ],\n  providers: [],\n})\nexport class AssistedBookingModule {}\n","import { Routes, RouterModule } from '@angular/router';\nimport { AssistedBookingComponent } from './assisted-booking.component';\nimport { SuperAdminGuard } from '../auth/super-admin.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AssistedBookingComponent,\n    canActivate: [SuperAdminGuard],\n    data: { title: 'Agent Assisted Booking' },\n  },\n];\n\nexport const routing = RouterModule.forChild(routes);\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BaseComponent } from '../base.component';\nimport { FlightPNRValidationModel } from '../models/pnr.model';\nimport { FlightDestination } from '../models/cart-items/flight.model';\n\n@Component({\n  selector: 'app-flight-destination',\n  templateUrl: './flight-destination.component.html',\n})\nexport class FlightDestinationComponent extends BaseComponent {\n  @Input() pnr: FlightPNRValidationModel;\n  @Input() destination: FlightDestination;\n  @Output() onSelect = new EventEmitter<FlightDestination>();\n\n  isSelected(destination: FlightDestination): boolean {\n    return this.destination?.time === destination.time;\n  }\n\n  select(destination: FlightDestination): void {\n    this.onSelect.emit(destination);\n  }\n}\n","<div class=\"mt-8 flex flex-col gap-12\">\n  <p class=\"flex flex-row items-center gap-3 bg-gray-100 p-3\">\n    <i class=\"material-icons self-start\">help_outline</i>\n    It seems this is a return flight. However, outbound destination can not be determined automatically. Please select one of the available\n    options bellow.\n  </p>\n\n  <div class=\"flex flex-row gap-6 sm:flex-col\" [class.flex-col]=\"pnr.firstFlight.segments.length > 5\">\n    <ng-container *ngFor=\"let segment of pnr.firstFlight.segments; let first = first; let last = last\">\n      <div\n        (click)=\"!first && !last && select(segment.arrival)\"\n        class=\"relative flex max-w-xs flex-col gap-2 rounded p-4 shadow\"\n        [ngClass]=\"{\n          'cursor-pointer hover:shadow-md': !first && !last,\n          'bg-gray-100 bg-opacity-40 text-gray-400': first || last,\n          'outline outline-1 outline-emerald-600': isSelected(segment.arrival)\n        }\"\n      >\n        <span\n          class=\"absolute top-0 -translate-y-1/2 rounded bg-emerald-600 px-2 text-2xs capitalize text-white\"\n          [class.hidden]=\"!isSelected(segment.arrival)\"\n        >\n          Selected\n        </span>\n        <span class=\"text-center text-2xs text-gray-300\">\n          {{ (first ? segment.departure.time : segment.arrival.time) | dibDate: 'productDetailsWithTime' }}\n        </span>\n        <div class=\"flex flex-col items-center gap-2\">\n          <span class=\"text-center\">{{ first ? segment.departure.airportName : segment.arrival.airportName }}</span>\n          <span class=\"text-center text-xl font-bold\">{{ first ? segment.departure.airportCode : segment.arrival.airportCode }}</span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BaseComponent } from '../base.component';\nimport { FlightPNRValidationModel } from '../models/pnr.model';\n\n@Component({\n  selector: 'app-flight-details',\n  templateUrl: './flight-details.component.html',\n  styleUrls: ['../bookings/details/cart/cart-tabs-shared.scss'],\n  styles: [':host { display: block; position: relative; }'],\n  animations: [\n    // Animate elements height\n    trigger('openClose', [\n      state('open', style({})),\n      state('close', style({ opacity: 0, height: 0 })),\n      transition('open => close', [animate('200ms ease-in')]),\n      transition('close => open', [animate('400ms cubic-bezier(.62,-0.11,.25,1.66)')]),\n    ]),\n    // Hide element by setting it to display none\n    trigger('showHide', [\n      state('show', style({})),\n      state('hide', style({ opacity: 0, display: 'none' })),\n      transition('show => hide', [animate(0)]),\n      transition('hide => show', [animate('200ms ease-out')]),\n    ]),\n  ],\n})\nexport class FlightDetailsComponent extends BaseComponent {\n  @Input() pnr: FlightPNRValidationModel;\n\n  isOpen = false;\n\n  toggleDetails(): void {\n    this.isOpen = !this.isOpen;\n  }\n}\n","<a\n  mat-stroked-button\n  color=\"primary\"\n  (click)=\"toggleDetails()\"\n  class=\"absolute top-[20px] flex h-[20px] w-[20px] min-w-min -translate-x-1/2 cursor-pointer items-center justify-center rounded-full bg-white p-0\"\n>\n  <i class=\"material-icons text-sm\">{{ isOpen ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}</i>\n</a>\n\n<div class=\"flex flex-row gap-2 rounded rounded bg-gray-50 p-4 sm:flex-col\">\n  <div class=\"w-full border-r pr-3 sm:border-b sm:border-r-0 sm:pr-0 sm:pb-3\">\n    <div class=\"grid grid-flow-row auto-rows-min gap-1\">\n      <div class=\"flex flex-row items-center justify-between gap-2\">\n        <h3 class=\"flex cursor-pointer text-xl font-bold\" (click)=\"toggleDetails()\">{{ pnr.flightDetailsTitle }}</h3>\n      </div>\n      <span>\n        {{ pnr.firstFlight.firstSegment.departure.time | dibDate: 'productDetailsWithTime' }} -\n        {{ pnr.firstFlight.lastSegment.arrival.time | dibDate: 'productDetailsWithTime' }}\n        <ng-container *ngIf=\"!pnr.isReturnFlight && pnr.firstFlight.duration\">\n          ({{ pnr.firstFlight.duration | dibDuration: 'secondsToHM' }})\n        </ng-container>\n      </span>\n    </div>\n    <div [@openClose]=\"isOpen ? 'open' : 'close'\" *ngFor=\"let segment of pnr.firstFlight.segments\">\n      <div class=\"mt-4 mb-2 flex flex-row items-center justify-between border-b pb-1\" [class.hidden]=\"!isOpen\">\n        <!-- TODO: Add airline icons here -->\n        <span>{{ segment.marketingAirline.name }} &#9702; {{ segment.cabinClass | dibDashesToSpaces | titlecase }}</span>\n        <span class=\"rounded-xl bg-gray-500 px-1.5 text-2xs leading-normal text-white\">\n          {{ segment.marketingCarrier + segment.flightNumber }}\n        </span>\n      </div>\n      <!-- TODO: We can probably extract this into a dib-segment-timeline component and reuse for flights, trains and cars -->\n      <div class=\"segment-timeline-wrapper grid grid-flow-col gap-4\">\n        <div class=\"flex flex-col justify-evenly\">\n          <span class=\"text-lg font-bold\">{{ segment.departure.time | dibDate: 'time' }}</span>\n          <span class=\"timeline flex\">\n            <i class=\"line\"></i>\n          </span>\n          <span class=\"text-lg font-bold\">{{ segment.arrival.time | dibDate: 'time' }}</span>\n        </div>\n\n        <div class=\"flex flex-col justify-between py-1\">\n          <div class=\"flex flex-row items-center justify-between\">\n            <span class=\"flex-1\">{{ segment.departure.airportName }} ({{ segment.departure.airportCode }})</span>\n            <span class=\"ml-3 text-xs\">{{ segment.departure.time | dibDate: 'productDetails' }}</span>\n          </div>\n          <div class=\"flex flex-row items-center\">\n            <span class=\"flex-1 text-xs text-gray-500\"> Duration: {{ segment.duration | dibDuration: 'secondsToHM' }} </span>\n          </div>\n          <div class=\"flex flex-row items-center justify-between\">\n            <span class=\"flex-1\">{{ segment.arrival.airportName }} ({{ segment.arrival.airportCode }})</span>\n            <span class=\"ml-3 text-xs\">{{ segment.arrival.time | dibDate: 'productDetails' }}</span>\n          </div>\n        </div>\n      </div>\n      <!-- TODO: Extract this into dib-segment-layover component and reuse for flights and trains, etc. -->\n      <div\n        *ngIf=\"segment.layover\"\n        class=\"my-4 flex flex-wrap justify-between rounded bg-gradient-to-r from-blue-50 via-emerald-50 to-emerald-100 p-3\"\n      >\n        {{ segment.layover | dibDuration: 'secondsToHM' }} - {{ segment.shortLayover ? 'Short' : 'Long' }} layover in\n        {{ segment.arrival.airportName }}\n\n        <span class=\"ml-4 flex items-center\">\n          <i class=\"material-icons mr-1 text-xs\">language</i>\n          Timezone: {{ segment.arrival.time | date: 'z' }}\n        </span>\n      </div>\n    </div>\n  </div>\n  <div class=\"flex flex-col pl-3 sm:justify-between sm:pt-3 sm:pl-0\">\n    <div class=\"grid min-w-max transition-all transition duration-100 sm:w-full\" [ngClass]=\"{ 'gap-3 bg-dib-gray-100 p-6': isOpen }\">\n      <div class=\"flex items-baseline whitespace-nowrap text-gray-500\">\n        <span class=\"mr-1 text-3xl\">{{ pnr.totalPrice | number: '1.2-2' }}</span>\n        <small>{{ pnr.currency }}</small>\n      </div>\n      <div [@openClose]=\"isOpen ? 'open' : 'close'\">\n        <dib-plural [class.hidden]=\"!isOpen\" [from]=\"pnr.travellers.length\" single=\"passenger\" multiple=\"passengers\"></dib-plural>\n      </div>\n    </div>\n    <div [@openClose]=\"isOpen ? 'open' : 'close'\">\n      <div [class.hidden]=\"!isOpen\" class=\"mt-4 grid min-w-max gap-4\">\n        <app-cart-item-stat label=\"Booking Reference\">{{ pnr.bookingReference?.reference || '-' }}</app-cart-item-stat>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormControl } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { BehaviorSubject, noop } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { AppState } from '../reducers';\nimport { BaseComponent } from '../base.component';\nimport { CompanyUserModel } from '../models/company-user.model';\nimport { FlightPNRConfirmationForm, FlightPNRConfirmationRequest, FlightPNRValidationModel } from '../models/pnr.model';\nimport { CostCenterActions } from '../actions/cost-center.actions';\nimport { selectTravellerCostCentersData, travellerCostCentersLoading } from '../reducers/cost-center.reducer';\nimport { PaymentActions } from '../actions/payment.actions';\nimport { isLoadingPaymentOptions, selectBillingProfiles, selectLodgeCards } from '../reducers/payment.reducer';\nimport { PaymentType, SalesModel } from '../models/payment.model';\nimport { CompanyModel } from '../models/company.model';\nimport { EmployeeService } from '../services/employee.service';\nimport { EmployeeAdapter, EmployeeModel } from '../models/employee.model';\nimport { PnrActions } from '../actions/pnr.actions';\nimport { isConfirmingPNR, selectAdditionalPNRData, selectPNRCartId } from '../reducers/pnr.reducer';\nimport { GlobalActions } from '../actions/global.actions';\nimport { CheckoutActions } from '../actions/checkout.actions';\nimport {\n  hasMandatoryReferenceFields,\n  isLoadingBookingChannels,\n  isLoadingCheckoutOptions,\n  selectBookingChannels,\n  selectCheckoutOptions,\n  selectCheckoutPaymentOptions,\n} from '../reducers/checkout.reducer';\nimport { VendorsPaymentProvider, VendorPaymentPresentation } from '../models/vendors-payment-provider.model';\nimport { VendorsPaymentProviderActions } from '../actions/vendors-payment-providers.actions';\nimport {\n  selectVendorsPaymentProvidersData,\n  vendorsPaymentProviderLoading,\n} from '../reducers/vendors-payment-providers.reducer';\n\n@Component({\n  selector: 'app-product-details-form',\n  templateUrl: './product-details-form.component.html',\n})\nexport class ProductDetailsFormComponent extends BaseComponent implements OnChanges, OnInit {\n  SalesModel = SalesModel;\n  salesModels: SalesModel[] = [SalesModel.PASS_THROUGH, SalesModel.ADD_MARKUP];\n\n  PaymentType = PaymentType;\n  paymentTypes: PaymentType[] = [PaymentType.BILLING_PROFILE, PaymentType.LODGE_CARD];\n\n  @Input() company: CompanyModel;\n  @Input() booker: CompanyUserModel;\n  @Input() pnr: FlightPNRValidationModel;\n\n  employees$: BehaviorSubject<EmployeeModel[]> = new BehaviorSubject([]);\n  uniqueEmployees$: BehaviorSubject<EmployeeModel[]> = new BehaviorSubject([]);\n\n  isConfirmingPNR$ = this.store.select(isConfirmingPNR);\n  travellerCostCentersLoading$ = this.store.select(travellerCostCentersLoading);\n  getTravellerCostCenters$ = (id: string) =>\n    this.store\n      .select(selectTravellerCostCentersData)\n      .pipe(map((data) => data.find((costCenters) => costCenters.customerId === id)));\n\n  getLodgeCards$ = this.store.select(selectLodgeCards);\n  getBillingProfiles$ = this.store.select(selectBillingProfiles);\n  isLoadingPaymentOptions$ = this.store.select(isLoadingPaymentOptions).pipe(\n    tap((loading) => {\n      if (!loading) {\n        this.form.get('billingProfile')?.enable();\n        this.form.get('lodgeCard')?.enable();\n        this.form.get('vendorsLodgeCard')?.enable();\n      }\n    })\n  );\n\n  vendorsPaymentProviders$ = this.store.select(selectVendorsPaymentProvidersData).pipe(\n    map((providers) => {\n      return providers.filter((provider) => this.pnr.vendorType.includes(provider.vendorPaymentPresentation));\n    })\n  );\n\n  isLoadingVendorsPaymentProviders$ = this.store.select(vendorsPaymentProviderLoading);\n\n  bookingChannels$ = this.store.select(selectBookingChannels);\n  isLoadingBookingChannels$ = this.store.select(isLoadingBookingChannels);\n\n  checkoutOptions$ = this.store.select(selectCheckoutOptions);\n  isLoadingCheckoutOptions$ = this.store.select(isLoadingCheckoutOptions);\n  checkoutPaymentOptions$ = this.store.select(selectCheckoutPaymentOptions).pipe(\n    // Convert array to key => value pairs for easy access from template\n    map((options) => {\n      return Object.fromEntries(options.map((option) => [option.name, option.selected]));\n    })\n  );\n\n  hasMandatoryReferenceFields$ = this.store.select(hasMandatoryReferenceFields);\n\n  form = this.formBuilder.group<FlightPNRConfirmationForm>({\n    travellers: new FormArray([]),\n    salesModel: null,\n    purchasePrice: new FormControl({ value: null, disabled: true }),\n    sellPrice: new FormControl({ value: null, disabled: true }),\n    paymentMethod: null,\n    vendorsPaymentProvider: null,\n    agentFee: null,\n    note: null,\n    project: null,\n    purposeOfTrip: null,\n    yourReference: null,\n  });\n\n  constructor(\n    private router: Router,\n    private store: Store<AppState>,\n    protected formBuilder: FormBuilder,\n    private employeeService: EmployeeService\n  ) {\n    super();\n\n    this.subscriptions.add(\n      this.employees$.pipe(filter((employees) => !!employees.length)).subscribe((employees) => {\n        // Get the list of unique employees based on the externalId property. In case we have multiple\n        // employees with the same name we will get all of them in the list grouped by externalId\n        this.uniqueEmployees$.next(\n          employees.filter((employee, index, array) => {\n            return array.findIndex((item) => item.externalId === employee.externalId) === index;\n          })\n        );\n\n        this.store.dispatch(\n          CostCenterActions.loadTravellerCostCenters({\n            // Get unique list of employee IDs to load cost centers for. We will use bookers ID for guest travellers\n            ids: [...new Set(employees.map((employee) => employee.id || this.booker.id))],\n          })\n        );\n      })\n    );\n\n    this.subscriptions.add(\n      this.uniqueEmployees$.subscribe((uniqueEmployees) => {\n        uniqueEmployees.forEach((traveller) => {\n          this.formTravellers.push(\n            this.formBuilder.group({\n              id: traveller.id,\n              externalId: traveller.externalId,\n              name: traveller.fullName,\n              email: this.hasNamesake(traveller.fullName) ? null : traveller.email,\n              costCenter: null,\n            })\n          );\n        });\n      })\n    );\n\n    this.subscriptions.add(\n      this.store\n        .select(selectPNRCartId)\n        .pipe(\n          filter((id) => !!id),\n          tap((id) => {\n            this.store.dispatch(GlobalActions.showSuccessMessage({ message: 'PNR booking successfully created!' }));\n            this.store.dispatch(PnrActions.resetValidatedPnr());\n            this.router.navigate([`/companies/bookings/${id}`]).then(noop);\n          })\n        )\n        .subscribe()\n    );\n\n    this.subscriptions.add(\n      this.store\n        .select(selectAdditionalPNRData)\n        .pipe(\n          filter((data) => !!data),\n          tap((data) => {\n            this.store.dispatch(\n              VendorsPaymentProviderActions.loadVendorsPaymentProviders({\n                params: {\n                  page: 1,\n                  size: 10,\n                  sort: 'name,asc',\n                  active: 'true',\n                  vendorId: data.vendorId,\n                },\n              })\n            );\n          })\n        )\n        .subscribe()\n    );\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(CheckoutActions.loadBookingChannels());\n    this.store.dispatch(CheckoutActions.loadOptions({ companyId: this.company.id }));\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const pnr = changes?.pnr;\n    const previousValue = JSON.stringify(pnr?.previousValue, ['totalPrice', 'travellers']);\n    const currentValue = JSON.stringify(pnr?.currentValue, ['totalPrice', 'travellers']);\n\n    if (pnr?.currentValue?.state && previousValue !== currentValue) {\n      this.form.get('purchasePrice').setValue(this.pnr.totalPrice);\n      this.form.get('sellPrice').setValue(this.pnr.totalPrice);\n\n      // TODO: Add this to state so we can avoid having to reload travellers every time tab is changed\n      this.employeeService.resolveFromTravellers(this.company.id, this.pnr.travellers).subscribe((employees) => {\n        this.employees$.next(employees.map((employee) => new EmployeeAdapter().adapt(employee)));\n      });\n    }\n  }\n\n  confirm() {\n    // Trigger validators on the travellers form\n    this.formTravellers.markAllAsTouched();\n\n    if (this.form.valid) {\n      const formData = this.form.getRawValue();\n\n      const params: FlightPNRConfirmationRequest = {\n        tripName: this.pnr.flightDetailsTitle,\n        bookingReference: this.pnr.bookingReference,\n        bookerId: this.booker.id,\n        finalDestination: this.pnr.finalDestination || this.pnr.flightDestination.airportCode,\n        travellers: formData.travellers.map((traveller) => {\n          return {\n            id: traveller.id,\n            externalId: traveller.externalId,\n            costCenterId: traveller.costCenter.id,\n            phone: '',\n            email: traveller.email,\n          };\n        }),\n        paymentInfo: {\n          customerPaymentType: PaymentType[formData.paymentMethod],\n          customerPaymentId: formData.billingProfile?.id || formData.lodgeCard?.id,\n          sellPrice: formData.sellPrice,\n          vendorPaymentPresentation: formData.vendorsPaymentProvider.vendorPaymentPresentation,\n          vendorPaymentProviderId: formData.vendorsPaymentProvider.id,\n          vendorPaymentId: formData.referenceId || formData.vendorsLodgeCard?.id,\n          // We only send exchange penalty price and residual value for existing PNRs\n          exchangePenalty: this.pnr.isNew ? undefined : formData.exchangePenalty,\n          residualValue: this.pnr.isNew ? undefined : formData.residualValue,\n        },\n        referenceFields: {\n          projectId: formData.project?.id,\n          projectName: formData.project?.name,\n          purposeOfTripId: formData.purposeOfTrip?.id,\n          purposeOfTripName: formData.purposeOfTrip?.name,\n          yourReference: formData.yourReference || undefined,\n        },\n        agentFee: formData.agentFee.name,\n        agentNote: formData.note,\n      };\n\n      this.store.dispatch(PnrActions.confirmFlightPnr({ data: params }));\n    }\n  }\n\n  get formTravellers(): FormArray {\n    return this.form.controls['travellers'];\n  }\n\n  onPaymentMethodChange(value): void {\n    this.store.dispatch(PaymentActions.loadPaymentOptions({ id: this.booker.id }));\n\n    switch (value) {\n      case PaymentType.BILLING_PROFILE:\n        this.form.addControl('billingProfile', new FormControl({ value: null, disabled: true }));\n        this.form.removeControl('lodgeCard');\n        break;\n      case PaymentType.LODGE_CARD:\n        this.form.addControl('lodgeCard', new FormControl({ value: null, disabled: true }));\n        this.form.removeControl('billingProfile');\n        break;\n    }\n  }\n\n  onSalesModelChange(value): void {\n    switch (value) {\n      case SalesModel.PASS_THROUGH:\n        this.form.get('sellPrice').disable();\n        this.form.removeControl('exchangePenalty');\n        this.form.removeControl('residualValue');\n        break;\n      case SalesModel.ADD_MARKUP:\n        this.form.get('sellPrice').enable();\n        this.form.addControl('exchangePenalty', new FormControl(null));\n        this.form.addControl('residualValue', new FormControl(null));\n        break;\n    }\n  }\n\n  onVendorsPaymentProviderChange(provider: VendorsPaymentProvider): void {\n    switch (provider?.vendorPaymentPresentation) {\n      case VendorPaymentPresentation.VCC:\n        this.form.addControl('referenceId', new FormControl(''));\n        this.form.removeControl('vendorsLodgeCard');\n        break;\n      case VendorPaymentPresentation.LODGE_CARD:\n        this.store.dispatch(PaymentActions.loadPaymentOptions({ id: this.booker.id }));\n\n        this.form.addControl('vendorsLodgeCard', new FormControl({ value: null, disabled: true }));\n        this.form.removeControl('referenceId');\n        break;\n      default:\n        this.form.removeControl('referenceId');\n        this.form.removeControl('vendorsLodgeCard');\n        break;\n    }\n  }\n\n  onEmployeeSelect(value: string, index: number): void {\n    const employee = this.employees$.getValue().find((employee) => employee.email === value);\n\n    this.formTravellers.at(index).patchValue({ id: employee.id, name: employee.fullName, email: employee.email });\n  }\n\n  getEmployeesByName(name: string): EmployeeModel[] {\n    return this.employees$.getValue().filter((employee) => employee.fullName === name);\n  }\n\n  hasNamesake(name: string): boolean {\n    return this.getEmployeesByName(name).length > 1;\n  }\n\n  employeeId(travellerForm: AbstractControl): string {\n    return travellerForm.get('id').value;\n  }\n}\n","<form class=\"flex flex-col gap-2\" [formGroup]=\"form\">\n  <small class=\"mt-5 mb-3 w-full border-b pb-2 text-xs font-bold text-gray-500\">Passenger Details</small>\n  <ng-container *ngIf=\"(employees$ | async).length && !(travellerCostCentersLoading$ | async); else showLoader\">\n    <ng-container formArrayName=\"travellers\">\n      <ng-container *ngFor=\"let travellerForm of formTravellers.controls; let index = index\">\n        <div class=\"flex flex-row gap-2 sm:flex-col\" [formGroup]=\"$any(travellerForm)\">\n          <mat-form-field class=\"small white-fill w-[250px]\" disabled>\n            <mat-label>{{ employeeId(travellerForm) ? 'Employee Name' : 'Guest Name' }}</mat-label>\n            <input matInput readonly name=\"name\" formControlName=\"name\" autocomplete=\"off\" />\n          </mat-form-field>\n\n          <ng-container *ngIf=\"hasNamesake(travellerForm.get('name').value); else regularInput\">\n            <mat-form-field class=\"small white-fill w-[250px]\">\n              <mat-label>Select Employee Email</mat-label>\n              <mat-select formControlName=\"email\" (selectionChange)=\"onEmployeeSelect($event.value, index)\" required>\n                <mat-option *ngFor=\"let employee of getEmployeesByName(travellerForm.get('name').value)\" [value]=\"employee.email\">\n                  {{ employee.email }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </ng-container>\n\n          <ng-template #regularInput>\n            <mat-form-field class=\"small white-fill w-[250px]\">\n              <mat-label>{{ employeeId(travellerForm) ? 'Employee Email' : 'Guest Email' }}</mat-label>\n              <input matInput [readonly]=\"!!employeeId(travellerForm)\" name=\"email\" formControlName=\"email\" autocomplete=\"off\" required />\n            </mat-form-field>\n          </ng-template>\n\n          <mat-form-field\n            class=\"small white-fill w-[250px]\"\n            *ngIf=\"getTravellerCostCenters$(employeeId(travellerForm) || booker.id) | async as costCenters\"\n          >\n            <mat-label>Select Cost Center</mat-label>\n            <mat-select formControlName=\"costCenter\" required>\n              <mat-option *ngFor=\"let center of costCenters.costCenters\" [value]=\"center\">{{ center.name }}</mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <ng-template #showLoader>\n    <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n  </ng-template>\n\n  <!-- Vendor payment provider -->\n  <small class=\"mt-5 mb-3 w-full border-b pb-2 text-xs font-bold text-gray-500\">Vendor payment</small>\n  <div class=\"flex flex-row gap-2 sm:flex-col\">\n    <ng-container *ngIf=\"!(isLoadingVendorsPaymentProviders$ | async); else showLoader\">\n      <mat-form-field class=\"small white-fill w-[250px]\">\n        <mat-label>Vendor's Payment Provider</mat-label>\n        <mat-select (selectionChange)=\"onVendorsPaymentProviderChange($event.value)\" formControlName=\"vendorsPaymentProvider\" required>\n          <mat-option *ngFor=\"let provider of vendorsPaymentProviders$ | async\" [value]=\"provider\">\n            {{ provider.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"!!form.get('referenceId')\" class=\"small white-fill w-[250px]\">\n        <mat-label>Card Reference ID</mat-label>\n        <input matInput name=\"referenceId\" formControlName=\"referenceId\" autocomplete=\"off\" required />\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"!!form.get('vendorsLodgeCard')\" class=\"small white-fill w-[250px]\">\n        <mat-label>\n          <ng-container *ngIf=\"isLoadingPaymentOptions$ | async; else showLabel\">\n            <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n          </ng-container>\n          <ng-template #showLabel>Select Lodge Card</ng-template>\n        </mat-label>\n        <mat-select formControlName=\"vendorsLodgeCard\" required>\n          <mat-option *ngFor=\"let card of getLodgeCards$ | async\" [value]=\"card\">{{ card.name }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n  </div>\n\n  <!-- Sales model and markup -->\n  <small class=\"mt-5 mb-3 w-full border-b pb-2 text-xs font-bold text-gray-500\">Sales Model and Markup</small>\n  <div class=\"flex flex-col gap-2\">\n    <!-- TODO: Conditionally display markup form fields based on the sales model -->\n\n    <mat-form-field class=\"small white-fill w-[250px]\">\n      <mat-label>Select Sales Model</mat-label>\n      <mat-select (selectionChange)=\"onSalesModelChange($event.value)\" formControlName=\"salesModel\" required>\n        <mat-option *ngFor=\"let salesModel of salesModels\" [value]=\"salesModel\">\n          {{ salesModel | dibDashesToSpaces | titlecase }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <div *ngIf=\"form.get('salesModel').value\" class=\"flex flex-row flex-wrap gap-2 sm:flex-col\">\n      <mat-form-field class=\"small white-fill w-[250px]\">\n        <mat-label>Purchase Price ({{ pnr.currency }})</mat-label>\n        <input matInput name=\"purchasePrice\" formControlName=\"purchasePrice\" autocomplete=\"off\" required />\n      </mat-form-field>\n\n      <mat-form-field class=\"small white-fill w-[250px]\">\n        <mat-label>Sell Price inc. VAT ({{ pnr.currency }})</mat-label>\n        <input matInput name=\"sellPrice\" formControlName=\"sellPrice\" autocomplete=\"off\" required />\n      </mat-form-field>\n    </div>\n\n    <div *ngIf=\"!pnr.isNew && form.get('salesModel').value === SalesModel.ADD_MARKUP\" class=\"flex flex-row flex-wrap gap-2 sm:flex-col\">\n      <mat-form-field class=\"small white-fill w-[250px]\">\n        <mat-label>Exchange Penalty Price ({{ pnr.currency }})</mat-label>\n        <input matInput name=\"exchangePenalty\" formControlName=\"exchangePenalty\" autocomplete=\"off\" />\n      </mat-form-field>\n\n      <mat-form-field class=\"small white-fill w-[250px]\">\n        <mat-label>Residual Value ({{ pnr.currency }})</mat-label>\n        <input matInput name=\"residualValue\" formControlName=\"residualValue\" autocomplete=\"off\" />\n      </mat-form-field>\n    </div>\n  </div>\n\n  <!-- Customer payment method -->\n  <small class=\"mt-5 mb-3 w-full border-b pb-2 text-xs font-bold text-gray-500\">Customer payment method</small>\n  <ng-container *ngIf=\"!(isLoadingCheckoutOptions$ | async); else showLoader\">\n    <div class=\"flex flex-row gap-2 sm:flex-col\">\n      <!-- TODO: Check what payment methods we support and conditionally show the other dropdown if needed -->\n      <mat-form-field class=\"small white-fill w-[250px]\">\n        <mat-label>Select Payment Method</mat-label>\n        <mat-select\n          *ngIf=\"checkoutPaymentOptions$ | async as paymentOptions\"\n          (selectionChange)=\"onPaymentMethodChange($event.value)\"\n          formControlName=\"paymentMethod\"\n          required\n        >\n          <mat-option *ngFor=\"let paymentType of paymentTypes\" [value]=\"paymentType\" [disabled]=\"!paymentOptions[paymentType]\">\n            {{ paymentType | dibDashesToSpaces | titlecase }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"form.get('paymentMethod').value === PaymentType.BILLING_PROFILE\" class=\"small white-fill w-[250px]\">\n        <mat-label>\n          <ng-container *ngIf=\"isLoadingPaymentOptions$ | async; else showLabel\">\n            <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n          </ng-container>\n          <ng-template #showLabel>Select Billing Profile</ng-template>\n        </mat-label>\n        <mat-select formControlName=\"billingProfile\" required>\n          <mat-option *ngFor=\"let profile of getBillingProfiles$ | async\" [value]=\"profile\">{{ profile.legalName }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"form.get('paymentMethod').value === PaymentType.LODGE_CARD\" class=\"small white-fill w-[250px]\">\n        <mat-label>\n          <ng-container *ngIf=\"isLoadingPaymentOptions$ | async; else showLabel\">\n            <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n          </ng-container>\n          <ng-template #showLabel>Select Lodge Card</ng-template>\n        </mat-label>\n        <mat-select formControlName=\"lodgeCard\" required>\n          <mat-option *ngFor=\"let card of getLodgeCards$ | async\" [value]=\"card\">{{ card.name }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </ng-container>\n\n  <!-- We only display this section if there is at least one mandatory reference field -->\n  <ng-container *ngIf=\"hasMandatoryReferenceFields$ | async\">\n    <small class=\"mt-5 mb-3 w-full border-b pb-2 text-xs font-bold text-gray-500\">Reference Fields</small>\n    <ng-container *ngIf=\"checkoutOptions$ | async as options\">\n      <div class=\"flex flex-row gap-2 sm:flex-col\">\n        <mat-form-field class=\"small white-fill w-[250px]\" *ngIf=\"options.project?.mandatory && options.project?.items?.length\">\n          <mat-label>{{ options.project?.label || 'Project' }}</mat-label>\n          <mat-select formControlName=\"project\" required>\n            <mat-option *ngFor=\"let project of options.project?.items\" [value]=\"project\">{{ project.name }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class=\"small white-fill w-[250px]\" *ngIf=\"options.purposeOfTrip?.mandatory && options.purposeOfTrip?.items?.length\">\n          <mat-label>{{ options.purposeOfTrip?.label || 'Purpose of trip' }}</mat-label>\n          <mat-select formControlName=\"purposeOfTrip\" required>\n            <mat-option *ngFor=\"let purpose of options.purposeOfTrip?.items\" [value]=\"purpose\">{{ purpose.name }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class=\"small white-fill w-[250px]\" *ngIf=\"options.yourReference?.mandatory\" disabled>\n          <mat-label>{{ options.yourReference?.label || 'Your reference' }}</mat-label>\n          <input matInput name=\"yourReference\" formControlName=\"yourReference\" autocomplete=\"off\" required />\n        </mat-form-field>\n      </div>\n    </ng-container>\n  </ng-container>\n\n  <!-- Agent fee -->\n  <small class=\"mt-5 mb-3 w-full border-b pb-2 text-xs font-bold text-gray-500\">Agent fee and Notes</small>\n  <div class=\"flex flex-row gap-2 sm:flex-col\">\n    <mat-form-field class=\"small white-fill w-[250px]\">\n      <mat-label>\n        <ng-container *ngIf=\"isLoadingBookingChannels$ | async; else showBookingChannelsLabel\">\n          <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n        </ng-container>\n        <ng-template #showBookingChannelsLabel>Agent Fee</ng-template>\n      </mat-label>\n      <mat-select formControlName=\"agentFee\" required>\n        <mat-option *ngFor=\"let channel of bookingChannels$ | async\" [value]=\"channel\">{{ channel.name }}</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n\n  <!-- Agent note -->\n  <div class=\"flex flex-row gap-2 sm:flex-col\">\n    <mat-form-field class=\"small white-fill w-[500px]\">\n      <mat-label>Agent note</mat-label>\n      <textarea matInput formControlName=\"note\" type=\"text\" name=\"note\" cols=\"60\" rows=\"10\"></textarea>\n    </mat-form-field>\n  </div>\n\n  <button\n    [disabled]=\"(travellerCostCentersLoading$ | async) || (isConfirmingPNR$ | async)\"\n    class=\"mt-4 w-min\"\n    type=\"submit\"\n    mat-stroked-button\n    color=\"primary\"\n    (click)=\"confirm()\"\n  >\n    <span *ngIf=\"!(isConfirmingPNR$ | async); else loader\">Confirm</span>\n    <ng-template #loader>\n      <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n    </ng-template>\n  </button>\n</form>\n","import { Component, Input } from '@angular/core';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { AppState } from '../reducers';\nimport { BaseComponent } from '../base.component';\nimport { CompanyUserModel } from '../models/company-user.model';\nimport { FlightPNRValidationModel } from '../models/pnr.model';\nimport { CompanyModel } from '../models/company.model';\nimport { FlightDestination } from '../models/cart-items/flight.model';\nimport { PnrActions } from '../actions/pnr.actions';\nimport { isConfirmingPNR } from '../reducers/pnr.reducer';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n})\nexport class ProductDetailsComponent extends BaseComponent {\n  flightDestination$: BehaviorSubject<FlightDestination> = new BehaviorSubject(null);\n\n  @Input() company: CompanyModel;\n  @Input() booker: CompanyUserModel;\n  @Input() pnr: FlightPNRValidationModel;\n\n  isConfirmingPNR$ = this.store.select(isConfirmingPNR);\n\n  constructor(private router: Router, private store: Store<AppState>, protected formBuilder: UntypedFormBuilder) {\n    super();\n  }\n\n  get hasFlightDestination(): boolean {\n    return !!this.pnr.flightDestination;\n  }\n\n  selectFlightDestination(destination: FlightDestination): void {\n    this.flightDestination$.next(destination);\n  }\n\n  confirmFlightDestination(): void {\n    this.store.dispatch(\n      PnrActions.setFlightFinalDestination({ destination: this.flightDestination$.value.airportCode })\n    );\n  }\n\n  get pageTitle(): string {\n    if (this.pnr.isNew) return 'Create new';\n    if (this.pnr.isPreview) return 'Preview existing';\n\n    return 'Update existing';\n  }\n}\n","<div class=\"flex w-full justify-between\">\n  <div>\n    <h2 class=\"text-xl\">{{ pageTitle }} flight booking</h2>\n    <span class=\"text-xs text-gray-500\">\n      <ng-container *ngIf=\"pnr.isPreview; else defaultDescription\">\n        PNR found but has no changes on it so this is where you can preview and go to existing cart to see full details\n      </ng-container>\n      <ng-template #defaultDescription>\n        Second step is to fill in all the fields required for a product including passenger details, payment provider, markup, fees, etc.\n      </ng-template>\n    </span>\n  </div>\n</div>\n\n<div *ngIf=\"hasFlightDestination; else askForFlightDestination\" class=\"mt-8 flex flex-col gap-2\" [class.loading]=\"isConfirmingPNR$ | async\">\n  <app-flight-details [pnr]=\"pnr\"></app-flight-details>\n\n  <!-- PNR Details Form -->\n  <app-product-details-form\n    *ngIf=\"!pnr.isPreview; else previewDetails\"\n    [pnr]=\"pnr\"\n    [company]=\"company\"\n    [booker]=\"booker\"\n  ></app-product-details-form>\n\n  <!-- Preview PNR Details -->\n  <ng-template #previewDetails>\n    <small class=\"mt-5 mb-3 w-full border-b pb-2 text-xs font-bold text-gray-500\">Passenger Details</small>\n    <div class=\"flex flex-col\">\n      <div *ngFor=\"let traveler of pnr.travellers\" class=\"mb-3 flex flex-col\">\n        <div class=\"flex flex-col flex-wrap\">\n          <span class=\"mr-3 font-bold\">{{ traveler.firstName }} {{ traveler.lastName }}</span>\n          <div *ngIf=\"traveler.email\" class=\"mr-3 flex text-xs\">\n            <i class=\"material-icons mr-1 text-xs text-dib-green-600\">email</i>\n            <span>{{ traveler.email }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <a\n      [routerLink]=\"['/companies/bookings', pnr.cartId]\"\n      class=\"group mt-6 flex cursor-pointer items-center gap-2 font-bold text-dib-green-600 sm:mt-2\"\n    >\n      View booking details\n      <i class=\"material-icons group-hover:-translate-x-1\">arrow_right_alt</i>\n    </a>\n  </ng-template>\n</div>\n\n<ng-template #askForFlightDestination>\n  <app-flight-destination\n    [pnr]=\"pnr\"\n    [destination]=\"flightDestination$ | async\"\n    (onSelect)=\"selectFlightDestination($event)\"\n  ></app-flight-destination>\n\n  <button\n    [disabled]=\"!(flightDestination$ | async)\"\n    class=\"mt-10 w-min\"\n    type=\"submit\"\n    mat-stroked-button\n    color=\"primary\"\n    (click)=\"confirmFlightDestination()\"\n  >\n    <span>Confirm outbound destination</span>\n  </button>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { BaseComponent } from '../base.component';\nimport { FlightPNRValidationModel } from '../models/pnr.model';\n\n@Component({\n  selector: 'app-product-updates',\n  templateUrl: './product-updates.component.html',\n})\nexport class ProductUpdatesComponent extends BaseComponent {\n  @Input() updates: FlightPNRValidationModel['updates'];\n}\n","<div class=\"flex w-full justify-between\">\n  <div>\n    <h2 class=\"text-xl\">History of flight booking changes</h2>\n    <span class=\"text-xs text-gray-500\"> Here you can see a ist of changes made to this PNR that are currently missing in our system </span>\n  </div>\n</div>\n\n<div class=\"mt-8 min-h-[250px]\">\n  <ul class=\"ml-4 list-disc space-y-2\">\n    <li class=\"text-gray-500\" *ngFor=\"let update of updates\">{{ update }}</li>\n  </ul>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormControl } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { AppState } from '../reducers';\nimport { BaseComponent } from '../base.component';\nimport { PnrActions } from '../actions/pnr.actions';\nimport { isValidatingPNR } from '../reducers/pnr.reducer';\nimport { CompanyModel } from '../models/company.model';\nimport { CompanyUserModel } from '../models/company-user.model';\nimport { environment } from '../../environments/environment';\nimport { productsLoading, selectProductsData } from '../reducers/products.reducer';\nimport { ProductActions } from '../actions/products.actions';\nimport { selectVendorsData, vendorsLoading } from '../reducers/vendors.reducer';\nimport { ProductModel } from '../models/product.model';\nimport { VendorActions } from '../actions/vendors.actions';\nimport { VendorModel, VendorName } from '../models/vendor.model';\n\ntype MockedActions = 'update' | 'preview';\ninterface ValidatePNRForm {\n  company: FormControl<string>;\n  booker: FormControl<string>;\n  product: FormControl<ProductModel>;\n  vendor: FormControl<VendorModel>;\n  pnr: FormControl<string>;\n}\n\n@Component({\n  selector: 'app-validate-pnr',\n  templateUrl: './validate-pnr.component.html',\n})\nexport class ValidatePNRComponent extends BaseComponent implements OnChanges {\n  form = this.formBuilder.group<ValidatePNRForm>({\n    company: null,\n    booker: null,\n    product: null,\n    vendor: null,\n    pnr: null,\n  });\n\n  isValidatingPNR$ = this.store.select(isValidatingPNR);\n\n  isLoadingProducts$ = this.store.select(productsLoading);\n  products$ = this.store.select(selectProductsData).pipe(\n    map((products) => products.filter((product) => !!product.base)),\n    // Display only flight product until other product types are supported\n    map((products) => products.filter((product) => product.name === 'Flight')),\n    filter((products) => !!products.length),\n    tap((products) => {\n      // After products are loaded, preselect first product from the list\n      this.form.get('product').patchValue(products[0]);\n    })\n  );\n\n  isLoadingVendors$ = this.store.select(vendorsLoading);\n  vendors$ = this.store.select(selectVendorsData).pipe(\n    // Display only vendors that have a custom provider vendor name\n    map((vendors) => vendors.filter((vendor) => !!vendor.vendorName)),\n    tap((vendors) => {\n      // Preselect vendor with vendorName that equals LufthansaGroup\n      this.form.get('vendor').patchValue(vendors.find((vendor) => vendor.vendorName === VendorName.LUFTHANSA));\n    })\n  );\n\n  @Input() company: CompanyModel;\n  @Input() booker: CompanyUserModel;\n\n  mockPnr = environment.mock.pnr;\n  mockedAction$: BehaviorSubject<MockedActions> = new BehaviorSubject(null);\n\n  constructor(protected formBuilder: FormBuilder, private store: Store<AppState>) {\n    super();\n\n    this.store.dispatch(PnrActions.resetValidatedPnr());\n    this.store.dispatch(\n      ProductActions.loadProducts({ params: { page: 1, size: 10, sort: 'base,desc|name,asc', active: 'true' } })\n    );\n\n    this.subscriptions.add(\n      this.form\n        .get('product')\n        .valueChanges.pipe(distinctUntilChanged((prev, current) => JSON.stringify(prev) === JSON.stringify(current)))\n        .subscribe((product) => {\n          // Every time we change product we have to reload vendors as well\n          this.store.dispatch(\n            VendorActions.loadVendors({\n              params: { page: 1, size: 10, sort: 'active,desc|name,asc', productId: product.id },\n            })\n          );\n        })\n    );\n  }\n\n  // Watch the changes on the inputs, so we can reset the form every time there is an update\n  ngOnChanges(changes: SimpleChanges): void {\n    const company = changes?.company;\n    const booker = changes?.booker;\n\n    if (company?.currentValue?.id && JSON.stringify(company?.previousValue) !== JSON.stringify(company?.currentValue)) {\n      this.form.get('company').patchValue(this.company.corporationName);\n    }\n\n    if (booker?.currentValue?.id && JSON.stringify(booker?.previousValue) !== JSON.stringify(booker?.currentValue)) {\n      this.form.get('booker').patchValue(this.booker.fullName);\n    }\n  }\n\n  validate() {\n    if (this.form.valid) {\n      const data = this.form.getRawValue();\n\n      // This is a hack that works with mocked data in order to mock existing PNR\n      if (this.mockedAction$.getValue()) {\n        data.pnr += `_${this.mockedAction$.getValue()}`;\n      }\n\n      this.store.dispatch(\n        PnrActions.saveAdditionalValidationData({\n          data: {\n            vendorId: data.vendor.id,\n            productId: data.product.id,\n          },\n        })\n      );\n\n      this.store.dispatch(\n        PnrActions.validateFlightPnr({\n          data: {\n            bookingReference: {\n              reference: data.pnr,\n              source: data.vendor.vendorName,\n            },\n            bookerId: this.booker.id,\n          },\n        })\n      );\n    }\n  }\n\n  onMockedActionsClick(action: MockedActions) {\n    this.mockedAction$.next(action);\n  }\n}\n","<div class=\"flex w-full justify-between\">\n  <div>\n    <h2 class=\"text-xl\">Validate PNR</h2>\n    <span class=\"text-xs text-gray-500\"> First step is to validate PNR number by filling in all the required fields </span>\n  </div>\n</div>\n\n<form [formGroup]=\"form\" *ngIf=\"company && booker\" class=\"mt-8 flex flex-col gap-2\" [class.loading]=\"isValidatingPNR$ | async\">\n  <div class=\"flex flex-row gap-2 sm:flex-col\">\n    <mat-form-field class=\"small white-fill w-[250px]\">\n      <mat-label>Company</mat-label>\n      <input readonly matInput name=\"company\" formControlName=\"company\" autocomplete=\"off\" required />\n    </mat-form-field>\n\n    <mat-form-field class=\"small white-fill w-[250px]\">\n      <mat-label>Booker</mat-label>\n      <input readonly matInput name=\"booker\" formControlName=\"booker\" autocomplete=\"off\" required />\n    </mat-form-field>\n\n    <mat-form-field class=\"small white-fill w-[250px]\">\n      <mat-label>\n        <ng-container *ngIf=\"isLoadingProducts$ | async; else showProductLabel\">\n          <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n        </ng-container>\n        <ng-template #showProductLabel>Product Type</ng-template>\n      </mat-label>\n      <mat-select formControlName=\"product\" required>\n        <mat-option *ngFor=\"let product of products$ | async\" [value]=\"product\">{{ product.name }}</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n\n  <div class=\"flex flex-row gap-2 sm:flex-col\">\n    <mat-form-field class=\"small white-fill w-[250px]\">\n      <mat-label>\n        <ng-container *ngIf=\"isLoadingVendors$ | async; else showVendorLabel\">\n          <dib-dot-loader size=\"small\" color=\"current\"></dib-dot-loader>\n        </ng-container>\n        <ng-template #showVendorLabel>Vendor</ng-template>\n      </mat-label>\n      <mat-select formControlName=\"vendor\" required>\n        <mat-option *ngFor=\"let vendor of vendors$ | async\" [value]=\"vendor\">{{ vendor.vendorName }}</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field class=\"small white-fill w-[250px]\">\n      <mat-label>Enter PNR</mat-label>\n      <input matInput name=\"pnr\" formControlName=\"pnr\" autocomplete=\"off\" required />\n    </mat-form-field>\n  </div>\n\n  <div class=\"flex flex-row flex-wrap gap-5\">\n    <button [disabled]=\"isValidatingPNR$ | async\" class=\"mt-4 w-min\" type=\"submit\" mat-stroked-button color=\"primary\" (click)=\"validate()\">\n      <dib-dot-loader size=\"small\" color=\"current\" *ngIf=\"isValidatingPNR$ | async\"></dib-dot-loader>\n\n      <ng-container *ngIf=\"!(isValidatingPNR$ | async)\">\n        <span>Validate</span>\n        <i class=\"material-icons ml-2 text-lg\">auto_fix_normal</i>\n      </ng-container>\n    </button>\n\n    <!-- Only available when data is mocked and serve as a helper while testing -->\n    <ng-container *ngIf=\"mockPnr\">\n      <div class=\"mt-4 pt-2\">\n        <mat-radio-group class=\"flex flex-row gap-5\">\n          <mat-radio-button value=\"preview\" color=\"primary\" (change)=\"onMockedActionsClick('preview')\">Preview PNR?</mat-radio-button>\n          <mat-radio-button value=\"update\" color=\"primary\" (change)=\"onMockedActionsClick('update')\">Update PNR?</mat-radio-button>\n        </mat-radio-group>\n      </div>\n    </ng-container>\n  </div>\n</form>\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, catchError, tap, switchMap, withLatestFrom, filter } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { AppState } from '../reducers';\nimport { GlobalActions } from '../actions/global.actions';\nimport { CheckoutService } from '../services/checkout.service';\nimport { CheckoutActions } from '../actions/checkout.actions';\nimport { hasBookingChannelsInStore, hasCheckoutOptionsInStore } from '../reducers/checkout.reducer';\n\n@Injectable()\nexport class CheckoutEffects {\n  loadCheckoutOptions$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CheckoutActions.loadOptions),\n      withLatestFrom(this.store.select(hasCheckoutOptionsInStore)),\n      // No need to load checkout options every time if we already have it in store\n      filter(([, hasOptions]) => !hasOptions),\n      tap(() => this.store.dispatch(CheckoutActions.loadOptionsStart())),\n      switchMap(([{ companyId }]) =>\n        this.checkoutService.getCheckoutOptions(companyId).pipe(\n          map((data) => {\n            return CheckoutActions.loadOptionsSuccess({ data });\n          }),\n          catchError(() => {\n            return of(\n              CheckoutActions.loadOptionsError({ error: 'Checkout options could not be loaded. Please try again.' })\n            );\n          })\n        )\n      )\n    )\n  );\n\n  loadBookingChannels$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CheckoutActions.loadBookingChannels),\n      withLatestFrom(this.store.select(hasBookingChannelsInStore)),\n      // No need to load checkout options every time if we already have it in store\n      filter(([, hasChannels]) => !hasChannels),\n      tap(() => this.store.dispatch(CheckoutActions.loadBookingChannelsStart())),\n      switchMap(() =>\n        this.checkoutService.getBookingChannels().pipe(\n          map((data) => {\n            return CheckoutActions.loadBookingChannelsSuccess({ data });\n          }),\n          catchError(() => {\n            return of(\n              CheckoutActions.loadBookingChannelsError({\n                error: 'Booking channels could not be loaded. Please try again.',\n              })\n            );\n          })\n        )\n      )\n    )\n  );\n\n  showToast$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(CheckoutActions.loadOptionsError, CheckoutActions.loadBookingChannelsError),\n        tap(({ error }) => {\n          this.store.dispatch(GlobalActions.showErrorMessage({ message: error }));\n        })\n      ),\n    { dispatch: false }\n  );\n\n  constructor(private actions$: Actions, private store: Store<AppState>, private checkoutService: CheckoutService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, catchError, tap, switchMap } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { AppState } from '../reducers';\nimport { GlobalActions } from '../actions/global.actions';\nimport { CostCenterService } from '../services/cost-center.service';\nimport { CostCenterActions } from '../actions/cost-center.actions';\n\n@Injectable()\nexport class CostCenterEffects {\n  loadTravellerCostCenters$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CostCenterActions.loadTravellerCostCenters),\n      tap(() => this.store.dispatch(CostCenterActions.loadTravellerCostCentersStart())),\n      switchMap(({ ids }) =>\n        this.costCenterService.loadForTravellers(ids).pipe(\n          map((data) => {\n            return CostCenterActions.loadTravellerCostCentersSuccess({ data });\n          }),\n          catchError(() => {\n            return of(\n              CostCenterActions.loadTravellerCostCentersError({\n                error: 'Traveller cost centers could not be loaded. Please try again.',\n              })\n            );\n          })\n        )\n      )\n    )\n  );\n\n  showToast$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(CostCenterActions.loadTravellerCostCentersError),\n        tap(({ error }) => {\n          this.store.dispatch(GlobalActions.showErrorMessage({ message: error }));\n        })\n      ),\n    { dispatch: false }\n  );\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<AppState>,\n    private costCenterService: CostCenterService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, catchError, tap, switchMap, withLatestFrom, filter } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { AppState } from '../reducers';\nimport { GlobalActions } from '../actions/global.actions';\nimport { PaymentActions } from '../actions/payment.actions';\nimport { PaymentService } from '../services/payment.service';\nimport { hasPaymentOptionsInStore } from '../reducers/payment.reducer';\n\n@Injectable()\nexport class PaymentEffects {\n  loadPaymentOptions$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PaymentActions.loadPaymentOptions),\n      withLatestFrom(this.store.select(hasPaymentOptionsInStore)),\n      // No need to load payment options every time if we already have it in store\n      filter(([, hasOptions]) => !hasOptions),\n      tap(() => this.store.dispatch(PaymentActions.loadPaymentOptionsStart())),\n      switchMap(([{ id }]) =>\n        this.paymentService.getPaymentOptions(id).pipe(\n          map((data) => {\n            return PaymentActions.loadPaymentOptionsSuccess({ data });\n          }),\n          catchError(() => {\n            return of(\n              PaymentActions.loadPaymentOptionsError({\n                error: 'Payment options could not be loaded. Please try again.',\n              })\n            );\n          })\n        )\n      )\n    )\n  );\n\n  showToast$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(PaymentActions.loadPaymentOptionsError),\n        tap(({ error }) => {\n          this.store.dispatch(GlobalActions.showErrorMessage({ message: error }));\n        })\n      ),\n    { dispatch: false }\n  );\n\n  constructor(private actions$: Actions, private store: Store<AppState>, private paymentService: PaymentService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, catchError, tap, switchMap } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { AppState } from '../reducers';\nimport { GlobalActions } from '../actions/global.actions';\nimport { PNRService } from '../services/pnr.service';\nimport { PnrActions } from '../actions/pnr.actions';\n\n@Injectable()\nexport class PNREffects {\n  validateFlightPNR$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PnrActions.validateFlightPnr),\n      tap(() => this.store.dispatch(PnrActions.validateFlightPnrStart())),\n      switchMap(({ data }) =>\n        this.pnrService.validateFlightPNR(data).pipe(\n          map((response) => {\n            return PnrActions.validateFlightPnrSuccess({ data: response });\n          }),\n          catchError(() => {\n            return of(\n              PnrActions.validateFlightPnrError({ error: 'Flight PNR could not be validated. Please try again.' })\n            );\n          })\n        )\n      )\n    )\n  );\n\n  confirmFlightPNR$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PnrActions.confirmFlightPnr),\n      tap(() => this.store.dispatch(PnrActions.confirmFlightPnrStart())),\n      switchMap(({ data }) =>\n        this.pnrService.confirmFlightPNR(data).pipe(\n          map((response) => {\n            return PnrActions.confirmFlightPnrSuccess({ data: response });\n          }),\n          catchError(() => {\n            return of(\n              PnrActions.confirmFlightPnrError({ error: 'Flight PNR could not be confirmed. Please try again.' })\n            );\n          })\n        )\n      )\n    )\n  );\n\n  showToast$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(PnrActions.validateFlightPnrError, PnrActions.confirmFlightPnrError),\n        tap(({ error }) => {\n          this.store.dispatch(GlobalActions.showErrorMessage({ message: error }));\n        })\n      ),\n    { dispatch: false }\n  );\n\n  constructor(private actions$: Actions, private store: Store<AppState>, private pnrService: PNRService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Adapter } from './adapter';\n\n/**\n * TODO: Align these props with {@link CompanyUser} interface props\n *  Ideally, these two models should be identical and merged together\n */\nexport interface Employee {\n  id: string;\n  email: string;\n  userType: string;\n  firstName: string;\n  lastName: string;\n  cellphone: string;\n  address1: string;\n  address2: string;\n  zipCode: string;\n  city: string;\n  country: string;\n  stripeCustomerId: any;\n  customerType: string;\n  companyName: string;\n  userTitle: string;\n  allowAgentOverride: boolean;\n\n  // We can receive this prop sometimes when matching employees with travellers\n  externalId?: string;\n}\n\nexport class EmployeeModel implements Employee {\n  constructor(\n    public id: string,\n    public email: string,\n    public userType: string,\n    public firstName: string,\n    public lastName: string,\n    public cellphone: string,\n    public address1: string,\n    public address2: string,\n    public zipCode: string,\n    public city: string,\n    public country: string,\n    public stripeCustomerId: any,\n    public customerType: string,\n    public companyName: string,\n    public userTitle: string,\n    public allowAgentOverride: boolean,\n\n    // We can receive this prop sometimes when matching employees with travellers\n    public externalId?: string\n  ) {}\n\n  get fullName(): string {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class EmployeeAdapter implements Adapter<Employee> {\n  adapt(item: Record<any, any>): EmployeeModel {\n    return new EmployeeModel(\n      item?.id,\n      item?.email,\n      item?.userType,\n      item?.firstName,\n      item?.lastName,\n      item?.cellphone,\n      item?.address1,\n      item?.address2,\n      item?.zipCode,\n      item?.city,\n      item?.country,\n      item?.stripeCustomerId,\n      item?.customerType,\n      item?.companyName,\n      item?.userTitle,\n      item?.allowAgentOverride,\n      item?.externalId\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BookingChannelsResponse, CheckoutOptions, CheckoutOptionsResponse } from '../models/checkout-options.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class CheckoutService {\n  private baseUrl = `${environment.api.ams}/api`;\n\n  constructor(private http: HttpClient) {}\n\n  getCheckoutOptions(companyId: string): Observable<CheckoutOptions> {\n    return this.http.get<CheckoutOptionsResponse>(`${this.baseUrl}/reference-fields/${companyId}/checkout-options`);\n  }\n\n  getBookingChannels(): Observable<BookingChannelsResponse> {\n    return this.http.get<BookingChannelsResponse>(`${this.baseUrl}/information-fields/get-booking-channels`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TravelerCostCenterResponse } from '../models/cost-center.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CostCenterService {\n  private baseUrl = '/api/tmcc/cost-centers';\n\n  constructor(private http: HttpClient) {}\n\n  loadForTravellers(ids: string[]): Observable<TravelerCostCenterResponse[]> {\n    return this.http.get<TravelerCostCenterResponse[]>(`${this.baseUrl}/customers-cost-centers`, {\n      params: { customerIds: ids.join(',') },\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { PNRValidationTraveler } from '../models/pnr.model';\nimport { Employee } from '../models/employee.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmployeeService {\n  private baseUrl = '/api/tmcc/corporations';\n\n  constructor(private http: HttpClient) {}\n\n  resolveFromTravellers(companyId: string, travellers: PNRValidationTraveler[]): Observable<Employee[]> {\n    return this.http.post<Employee[]>(`${this.baseUrl}/${companyId}/resolve-employees`, travellers);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PaymentOptions, PaymentOptionsResponse } from '../models/payment-options.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentService {\n  private baseUrl = '/api/tmcc/customers';\n\n  constructor(private http: HttpClient) {}\n\n  getPaymentOptions(customerId: string): Observable<PaymentOptions> {\n    return this.http\n      .get<PaymentOptionsResponse>(`${this.baseUrl}/${customerId}/payment-options`)\n      .pipe(map((data) => ({ billingProfiles: data.billings, lodgeCards: data.lodgeCards })));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {\n  FlightPNRConfirmation,\n  FlightPNRConfirmationRequest,\n  FlightPNRValidation,\n  FlightPNRValidationRequest,\n} from '../models/pnr.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PNRService {\n  /**\n   * TODO: Talk with BE to add some sort of prefix here to indicate it is a secure API (ie. /api)\n   *  It was removed because it is using different tokens from Portal, but we have to get it back somehow\n   *  because of this we have to mark all DFS related endpoints as secure in order for token to be sent.\n   *  For more info see {@link AddHeaderInterceptor#setHeaders}\n   */\n  private baseUrl = '/v1/tmcc/agent-assisted';\n  private baseUrlSecure = '/api/tmcc/agent-assisted';\n\n  constructor(private http: HttpClient) {}\n\n  validateFlightPNR(params: FlightPNRValidationRequest): Observable<FlightPNRValidation> {\n    return this.http.post<FlightPNRValidation>(`${environment.api.dfs}${this.baseUrl}/validate-booking`, params);\n  }\n\n  confirmFlightPNR(params: FlightPNRConfirmationRequest): Observable<FlightPNRConfirmation> {\n    return this.http.post<FlightPNRConfirmation>(`${this.baseUrlSecure}/confirmation`, params);\n  }\n}\n"],"names":["BehaviorSubject","combineLatest","forkJoin","of","distinctUntilChanged","filter","map","mergeMap","take","takeWhile","tap","withLatestFrom","companiesLoading","selectCompanyById","companyUsersLoading","getSelectedCompanyUser","CompanyActions","CompanyUserActions","BaseComponent","selectPNRData","PnrActions","i0","AssistedBookingComponent","constructor","formBuilder","route","store","select","pipe","user","id","companyLoading","companyUserLoading","prev","current","JSON","stringify","pnr","valid","activeStep$","getValue","goToDetails","ngOnInit","subscriptions","add","companyUser$","companyId","subscribe","company","dispatch","loadCompany","company$","params","traveller","loadAndSelectCompanyUser","goToValidate","next","goToUpdates","ngOnDestroy","resetValidatedPnr","selectors","features","decls","vars","consts","template","SimpleChanges","FormArray","FormControl","noop","CostCenterActions","selectTravellerCostCentersData","travellerCostCentersLoading","PaymentActions","isLoadingPaymentOptions","selectBillingProfiles","selectLodgeCards","PaymentType","SalesModel","EmployeeAdapter","isConfirmingPNR","selectAdditionalPNRData","selectPNRCartId","GlobalActions","CheckoutActions","hasMandatoryReferenceFields","isLoadingBookingChannels","isLoadingCheckoutOptions","selectBookingChannels","selectCheckoutOptions","selectCheckoutPaymentOptions","VendorPaymentPresentation","VendorsPaymentProviderActions","selectVendorsPaymentProvidersData","vendorsPaymentProviderLoading","ProductDetailsFormComponent","router","employeeService","PASS_THROUGH","ADD_MARKUP","BILLING_PROFILE","LODGE_CARD","data","find","costCenters","customerId","loading","form","get","enable","providers","provider","vendorType","includes","vendorPaymentPresentation","options","Object","fromEntries","option","name","selected","group","travellers","salesModel","purchasePrice","value","disabled","sellPrice","paymentMethod","vendorsPaymentProvider","agentFee","note","project","purposeOfTrip","yourReference","employees$","employees","length","uniqueEmployees$","employee","index","array","findIndex","item","externalId","loadTravellerCostCenters","ids","Set","booker","uniqueEmployees","forEach","formTravellers","push","fullName","email","hasNamesake","costCenter","showSuccessMessage","message","navigate","then","loadVendorsPaymentProviders","page","size","sort","active","vendorId","loadBookingChannels","loadOptions","ngOnChanges","changes","previousValue","currentValue","state","setValue","totalPrice","resolveFromTravellers","adapt","confirm","markAllAsTouched","formData","getRawValue","tripName","flightDetailsTitle","bookingReference","bookerId","finalDestination","flightDestination","airportCode","costCenterId","phone","paymentInfo","customerPaymentType","customerPaymentId","billingProfile","lodgeCard","vendorPaymentProviderId","vendorPaymentId","referenceId","vendorsLodgeCard","exchangePenalty","isNew","undefined","residualValue","referenceFields","projectId","projectName","purposeOfTripId","purposeOfTripName","agentNote","confirmFlightPnr","controls","onPaymentMethodChange","loadPaymentOptions","addControl","removeControl","onSalesModelChange","disable","onVendorsPaymentProviderChange","VCC","onEmployeeSelect","at","patchValue","getEmployeesByName","employeeId","travellerForm","inputs","ctx","ProductDetailsComponent","hasFlightDestination","selectFlightDestination","destination","flightDestination$","confirmFlightDestination","setFlightFinalDestination","pageTitle","isPreview","isValidatingPNR","environment","productsLoading","selectProductsData","ProductActions","selectVendorsData","vendorsLoading","VendorActions","VendorName","ValidatePNRComponent","product","vendor","products","base","vendors","vendorName","LUFTHANSA","mock","loadProducts","valueChanges","loadVendors","productId","corporationName","validate","mockedAction$","saveAdditionalValidationData","validateFlightPnr","reference","source","onMockedActionsClick","action"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}