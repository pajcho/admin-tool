{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/auth.component.ts","./src/app/auth/auth.module.ts","./src/app/auth/auth.routing.ts","./src/app/auth/change-password/change-password.component.ts","./src/app/auth/change-password/change-password.component.html","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/loggedin-auth.guard.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/password-token.guard.ts","./src/app/auth/set-password-token.guard.ts","./src/app/auth/set-password/set-password.component.ts","./src/app/auth/set-password/set-password.component.html","./src/app/auth/wrapper/wrapper.component.ts","./src/app/auth/wrapper/wrapper.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  template: `<router-outlet></router-outlet>`,\n  styles: [':host { height: 100%; }'],\n})\nexport class AuthComponent {}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CommonModule } from '@angular/common';\nimport { routing } from './auth.routing';\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { AuthWrapperComponent } from './wrapper/wrapper.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { SetPasswordComponent } from './set-password/set-password.component';\n\n@NgModule({\n  imports: [routing, ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatButtonModule, CommonModule],\n  declarations: [\n    AuthComponent,\n    AuthWrapperComponent,\n    LoginComponent,\n    ForgotPasswordComponent,\n    ChangePasswordComponent,\n    SetPasswordComponent,\n  ],\n  providers: [],\n})\nexport class AuthModule {}\n","import { Routes, RouterModule } from '@angular/router';\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { LoggedInAuthGuard } from './loggedin-auth.guard';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { PasswordTokenGuard } from './password-token.guard';\nimport { SetPasswordComponent } from './set-password/set-password.component';\nimport { SetPasswordTokenGuard } from './set-password-token.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      { path: 'login', component: LoginComponent, data: { title: 'Login' } },\n      { path: 'forgot-password', component: ForgotPasswordComponent, data: { title: 'Forgot password' } },\n      {\n        path: 'change-password',\n        component: ChangePasswordComponent,\n        canActivate: [PasswordTokenGuard],\n        data: { title: 'Change password' },\n      },\n      {\n        path: 'set-password',\n        component: SetPasswordComponent,\n        canActivate: [SetPasswordTokenGuard],\n        data: { title: 'Set password' },\n      },\n      { path: '', redirectTo: 'login', pathMatch: 'full' },\n    ],\n    canActivate: [LoggedInAuthGuard],\n  },\n];\n\nexport const routing = RouterModule.forChild(routes);\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { ofType } from '@ngrx/effects';\nimport { take } from 'rxjs/operators';\nimport { AppState } from '../../reducers';\nimport { AuthActions } from '../../actions/auth.actions';\nimport { hasError } from '../../reducers/auth.reducer';\nimport { BaseComponent } from '../../base.component';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n})\nexport class ChangePasswordComponent extends BaseComponent {\n  form: UntypedFormGroup;\n  isSubmitted = false;\n  serverErrors = false;\n  requestIsSent = false;\n\n  constructor(\n    formBuilder: UntypedFormBuilder,\n    private route: ActivatedRoute,\n    private store: Store<AppState>,\n    private actionSubject: ActionsSubject\n  ) {\n    super();\n\n    this.form = formBuilder.group({\n      password: ['', Validators.compose([Validators.required, Validators.minLength(4)])],\n      confirmPassword: ['', super.matches('password')],\n    });\n\n    // Reset server errors every time user interacts with the form\n    this.form.valueChanges.subscribe(() => {\n      this.serverErrors = false;\n      this.isSubmitted = false;\n    });\n\n    this.store.select(hasError).subscribe((hasError) => {\n      this.serverErrors = hasError;\n    });\n\n    this.actionSubject.pipe(ofType(AuthActions.changePasswordSuccess), take(1)).subscribe(() => {\n      this.requestIsSent = true;\n    });\n  }\n\n  get showErrorPanel(): boolean {\n    if (this.serverErrors) return true;\n\n    return (\n      this.isSubmitted &&\n      (this.form.touched || this.form.dirty) &&\n      (!!this.form.controls.password.errors || !!this.form.controls.confirmPassword.errors)\n    );\n  }\n\n  change(): void {\n    this.isSubmitted = true;\n\n    if (this.form.valid) {\n      this.store.dispatch(\n        AuthActions.changePassword({\n          id: this.route.snapshot.queryParams.token,\n          password: this.form.get('password').value,\n        })\n      );\n    }\n  }\n}\n","<dib-auth-wrapper>\n  <form [formGroup]=\"form\" (ngSubmit)=\"change()\" class=\"flex flex-col\">\n    <ng-container *ngIf=\"!requestIsSent; else showSuccessMessage\">\n      <div *ngIf=\"showErrorPanel\" class=\"mb-4 flex bg-dib-gray-100 p-4\">\n        <span class=\"material-icons mr-2 text-red-600\">error_outline</span>\n        <div class=\"flex flex-col\">\n          <span>You have entered incorrect details.</span>\n        </div>\n      </div>\n\n      <mat-form-field>\n        <mat-label>New Password</mat-label>\n        <input matInput type=\"password\" name=\"password\" formControlName=\"password\" required autocomplete=\"off\" />\n      </mat-form-field>\n\n      <mat-form-field>\n        <mat-label>Confirm New Password</mat-label>\n        <input matInput type=\"password\" name=\"confirmPassword\" formControlName=\"confirmPassword\" required autocomplete=\"off\" />\n      </mat-form-field>\n    </ng-container>\n    <ng-template #showSuccessMessage>\n      <div class=\"mb-10\">Password is updated.</div>\n    </ng-template>\n\n    <div class=\"flex items-center justify-between\">\n      <a class=\"text-emerald-600\" [routerLink]=\"'/auth/login'\">Return to Login</a>\n      <button *ngIf=\"!requestIsSent\" mat-flat-button color=\"primary\" class=\"py-1 px-4 text-white\">Send</button>\n    </div>\n  </form>\n</dib-auth-wrapper>\n","import { Component } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { ofType } from '@ngrx/effects';\nimport { take } from 'rxjs/operators';\nimport { AppState } from '../../reducers';\nimport { hasError } from '../../reducers/auth.reducer';\nimport { BaseComponent } from '../../base.component';\nimport { AuthActions } from '../../actions/auth.actions';\nimport { environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent extends BaseComponent {\n  form: UntypedFormGroup;\n  isSubmitted = false;\n  serverErrors = false;\n  requestIsSent = false;\n  usersAreMocked = environment.mock.users;\n  mockedForgotPasswordLink = '/auth/change-password?token=123123-123123-123123-123123';\n\n  constructor(formBuilder: UntypedFormBuilder, private store: Store<AppState>, private actionSubject: ActionsSubject) {\n    super();\n\n    this.form = formBuilder.group({\n      email: ['', Validators.compose([Validators.required, Validators.minLength(4), Validators.email])],\n    });\n\n    // Reset server errors every time user interacts with the form\n    this.form.valueChanges.subscribe(() => {\n      this.serverErrors = false;\n      this.isSubmitted = false;\n    });\n\n    this.store.select(hasError).subscribe((hasError) => {\n      this.serverErrors = hasError;\n    });\n\n    this.actionSubject.pipe(ofType(AuthActions.forgotPasswordSuccess), take(1)).subscribe(() => {\n      this.requestIsSent = true;\n    });\n  }\n\n  get showErrorPanel(): boolean {\n    if (this.serverErrors) return true;\n\n    return this.isSubmitted && (this.form.touched || this.form.dirty) && !!this.form.controls.email.errors;\n  }\n\n  request(): void {\n    this.isSubmitted = true;\n\n    if (this.form.valid) {\n      this.store.dispatch(AuthActions.forgotPassword({ email: this.form.get('email').value }));\n    }\n  }\n}\n","<dib-auth-wrapper>\n  <form [formGroup]=\"form\" (ngSubmit)=\"request()\" class=\"flex flex-col\">\n    <ng-container *ngIf=\"!requestIsSent; else showSuccessMessage\">\n      <div class=\"mb-6\">Request to change password will be sent to account’s email.</div>\n\n      <div *ngIf=\"showErrorPanel\" class=\"mb-4 flex bg-dib-gray-100 p-4\">\n        <span class=\"material-icons mr-2 text-red-600\">error_outline</span>\n        <div class=\"flex flex-col\">\n          <span>You have entered incorrect details.</span>\n        </div>\n      </div>\n\n      <mat-form-field>\n        <mat-label>Email address</mat-label>\n        <input matInput type=\"text\" name=\"email\" formControlName=\"email\" required autocomplete=\"off\" />\n      </mat-form-field>\n    </ng-container>\n    <ng-template #showSuccessMessage>\n      <div class=\"mb-10\">Request has been sent. Please check your email.</div>\n\n      <!-- There will be no email if we are using mock APIs and this will allow us to go through entire process -->\n      <div class=\"mb-10 rounded border bg-gray-100 p-4\" *ngIf=\"usersAreMocked\">\n        <span class=\"mb-2 block border-b pb-1 font-medium\">Mocked link</span>\n\n        <a class=\"text-emerald-600\" [routerLink]=\"'/auth/change-password'\" [queryParams]=\"{ token: 123123 }\">Click here</a>\n\n        to enter new password\n      </div>\n    </ng-template>\n\n    <div class=\"flex items-center justify-between\">\n      <a class=\"text-emerald-600\" [routerLink]=\"'/auth/login'\">Return to Login</a>\n      <button *ngIf=\"!requestIsSent\" data-id=\"request\" mat-flat-button color=\"primary\" class=\"py-1 px-4 text-white\">Request</button>\n    </div>\n  </form>\n</dib-auth-wrapper>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { map, take, withLatestFrom } from 'rxjs/operators';\nimport { noop, Observable } from 'rxjs';\nimport { isLoggedIn } from '../reducers/auth.reducer';\nimport { AppState } from '../reducers';\nimport { selectQueryParam } from '../reducers/router.reducer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoggedInAuthGuard implements CanActivate {\n  constructor(private store: Store<AppState>, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    return this.store.select(isLoggedIn).pipe(\n      take(1),\n      withLatestFrom(this.store.select(selectQueryParam('redirectTo'))),\n      map(([loggedIn, redirectTo]) => {\n        if (loggedIn) {\n          this.router.navigateByUrl(redirectTo || '/dashboard').then(noop);\n\n          return false;\n        }\n\n        return true;\n      })\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../reducers';\nimport { AuthActions } from '../../actions/auth.actions';\nimport { hasError } from '../../reducers/auth.reducer';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent {\n  form: UntypedFormGroup;\n  isSubmitted = false;\n  serverErrors = false;\n\n  constructor(formBuilder: UntypedFormBuilder, public router: Router, private store: Store<AppState>) {\n    this.form = formBuilder.group({\n      username: ['', Validators.compose([Validators.required, Validators.minLength(4), Validators.email])],\n      password: ['', Validators.compose([Validators.required, Validators.minLength(4)])],\n    });\n\n    // Reset server errors every time user interacts with the form\n    this.form.valueChanges.subscribe(() => {\n      this.serverErrors = false;\n      this.isSubmitted = false;\n    });\n\n    this.store.select(hasError).subscribe((hasError) => {\n      this.serverErrors = hasError;\n    });\n  }\n\n  get showErrorPanel(): boolean {\n    if (this.serverErrors) return true;\n\n    return (\n      this.isSubmitted &&\n      (this.form.touched || this.form.dirty) &&\n      (!!this.form.controls.username.errors || !!this.form.controls.password.errors)\n    );\n  }\n\n  login(): void {\n    this.isSubmitted = true;\n\n    if (this.form.valid) {\n      this.store.dispatch(AuthActions.login(this.form.getRawValue()));\n    }\n  }\n}\n","<dib-auth-wrapper>\n  <form [formGroup]=\"form\" (ngSubmit)=\"login()\" class=\"flex flex-col\">\n    <div *ngIf=\"showErrorPanel\" class=\"mb-4 flex bg-dib-gray-100 p-4\">\n      <span class=\"material-icons mr-2 text-red-600\">error_outline</span>\n      <div class=\"flex flex-col\">\n        <span>You have entered incorrect login details.</span>\n      </div>\n    </div>\n\n    <mat-form-field>\n      <mat-label>Email address</mat-label>\n      <input matInput type=\"email\" formControlName=\"username\" name=\"username\" required autocomplete=\"off\" />\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Password</mat-label>\n      <input matInput type=\"password\" formControlName=\"password\" name=\"password\" required autocomplete=\"off\" />\n    </mat-form-field>\n\n    <div class=\"flex items-center justify-between\">\n      <a class=\"text-emerald-600\" [routerLink]=\"'/auth/forgot-password'\">Forgot password</a>\n      <button data-id=\"login\" mat-flat-button color=\"primary\" class=\"py-1 px-4 text-white\">Log in</button>\n    </div>\n  </form>\n</dib-auth-wrapper>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { AuthService } from './auth.service';\nimport { AppState } from '../reducers';\nimport { GlobalActions } from '../actions/global.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PasswordTokenGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router, private store: Store<AppState>) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    return this.authService.validatePasswordToken(route.queryParams.token).pipe(\n      map((isValid) => {\n        if (!isValid) {\n          this.store.dispatch(\n            GlobalActions.showErrorMessage({ message: 'Invalid or expired token. Please double check your email.' })\n          );\n          this.router.navigate(['/auth/login']);\n          return false;\n        }\n\n        return true;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { AuthService } from './auth.service';\nimport { AppState } from '../reducers';\nimport { GlobalActions } from '../actions/global.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SetPasswordTokenGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router, private store: Store<AppState>) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    return this.authService.validateSetPasswordToken(route.queryParams.token).pipe(\n      map((isValid) => {\n        if (!isValid) {\n          this.store.dispatch(\n            GlobalActions.showErrorMessage({ message: 'Invalid or expired token. Please double check your email.' })\n          );\n          this.router.navigate(['/auth/login']);\n          return false;\n        }\n\n        return true;\n      })\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { ofType } from '@ngrx/effects';\nimport { take } from 'rxjs/operators';\nimport { AppState } from '../../reducers';\nimport { AuthActions } from '../../actions/auth.actions';\nimport { hasError } from '../../reducers/auth.reducer';\nimport { BaseComponent } from '../../base.component';\n\n@Component({\n  selector: 'app-set-password',\n  templateUrl: './set-password.component.html',\n})\nexport class SetPasswordComponent extends BaseComponent {\n  form: UntypedFormGroup;\n  isSubmitted = false;\n  serverErrors = false;\n  requestIsSent = false;\n\n  constructor(\n    formBuilder: UntypedFormBuilder,\n    private route: ActivatedRoute,\n    private store: Store<AppState>,\n    private actionSubject: ActionsSubject\n  ) {\n    super();\n\n    this.form = formBuilder.group({\n      password: ['', Validators.compose([Validators.required, Validators.minLength(4)])],\n      confirmPassword: ['', super.matches('password')],\n    });\n\n    // Reset server errors every time user interacts with the form\n    this.form.valueChanges.subscribe(() => {\n      this.serverErrors = false;\n      this.isSubmitted = false;\n    });\n\n    this.store.select(hasError).subscribe((hasError) => {\n      this.serverErrors = hasError;\n    });\n\n    this.actionSubject.pipe(ofType(AuthActions.setPasswordSuccess), take(1)).subscribe(() => {\n      this.requestIsSent = true;\n    });\n  }\n\n  get showErrorPanel(): boolean {\n    if (this.serverErrors) return true;\n\n    return (\n      this.isSubmitted &&\n      (this.form.touched || this.form.dirty) &&\n      (!!this.form.controls.password.errors || !!this.form.controls.confirmPassword.errors)\n    );\n  }\n\n  change(): void {\n    this.isSubmitted = true;\n\n    if (this.form.valid) {\n      this.store.dispatch(\n        AuthActions.setPassword({\n          id: this.route.snapshot.queryParams.token,\n          password: this.form.get('password').value,\n        })\n      );\n    }\n  }\n}\n","<dib-auth-wrapper>\n  <form [formGroup]=\"form\" (ngSubmit)=\"change()\" class=\"flex flex-col\">\n    <ng-container *ngIf=\"!requestIsSent; else showSuccessMessage\">\n      <div *ngIf=\"showErrorPanel\" class=\"mb-4 flex bg-dib-gray-100 p-4\">\n        <span class=\"material-icons mr-2 text-red-600\">error_outline</span>\n        <div class=\"flex flex-col\">\n          <span>You have entered incorrect details.</span>\n        </div>\n      </div>\n\n      <mat-form-field>\n        <mat-label>New Password</mat-label>\n        <input matInput type=\"password\" name=\"password\" formControlName=\"password\" required autocomplete=\"off\" />\n      </mat-form-field>\n\n      <mat-form-field>\n        <mat-label>Confirm New Password</mat-label>\n        <input matInput type=\"password\" name=\"confirmPassword\" formControlName=\"confirmPassword\" required autocomplete=\"off\" />\n      </mat-form-field>\n    </ng-container>\n    <ng-template #showSuccessMessage>\n      <div class=\"mb-10\">Your password is set. You can now login and start using your account.</div>\n    </ng-template>\n\n    <div class=\"flex items-center justify-between\">\n      <div>\n        <!-- Wrapped with div element so that we can preserve flex layout when link is hidden -->\n        <a *ngIf=\"requestIsSent\" class=\"text-emerald-600\" [routerLink]=\"'/auth/login'\">Take me to Login</a>\n      </div>\n      <button *ngIf=\"!requestIsSent\" mat-flat-button color=\"primary\" class=\"py-1 px-4 text-white\">Set password</button>\n    </div>\n  </form>\n</dib-auth-wrapper>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'dib-auth-wrapper',\n  templateUrl: './wrapper.component.html',\n  styleUrls: ['./wrapper.component.scss'],\n})\nexport class AuthWrapperComponent {}\n","<div>\n  <i class=\"material-icons text-dib-green-600 text-6xl self-center\">policy</i>\n\n  <div class=\"mt-6 w-full\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}