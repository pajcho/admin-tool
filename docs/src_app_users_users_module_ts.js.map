{"version":3,"file":"src_app_users_users_module_ts.js","mappings":"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","sources":["./src/app/auth/admin.guard.ts","./src/app/users/users.component.ts","./src/app/users/users.component.html","./src/app/users/users.module.ts","./src/app/users/users.routing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { loggedInUser } from '../reducers/auth.reducer';\nimport { AppState } from '../reducers';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private store: Store<AppState>, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    return this.store.select(loggedInUser).pipe(\n      take(1),\n      map((user) => {\n        if (!user.hasAdminAccess()) {\n          this.router.navigate(['/dashboard']);\n          return false;\n        }\n\n        return true;\n      })\n    );\n  }\n}\n","import { Component, Injector } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserActions } from '../actions/users.actions';\nimport { User, UserModel, UserType } from '../models/user.model';\nimport { selectUsers, selectUsersData } from '../reducers/users.reducer';\nimport { UserFormComponent } from './user-form.component';\nimport { ConfirmationDialogActions } from '../actions/confirmation-dialog.actions';\nimport { UserPasswordFormComponent } from './user-password-form.component';\nimport { loggedInUser } from '../reducers/auth.reducer';\nimport { BaseListingComponent } from '../base-listing.component';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n})\nexport class UsersComponent extends BaseListingComponent<User> {\n  userTypes: UserType[] = [UserType.AGENT, UserType.ADMIN, UserType.SUPER_ADMIN];\n\n  users$ = this.store.select(selectUsers);\n  loggedInUser$ = this.store.select(loggedInUser);\n  tableDataSource$ = this.store.select(selectUsersData);\n\n  constructor(public injector: Injector, public dialog: MatDialog) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.sortActive = 'firstName';\n    this.sortDirection = 'asc';\n    this.columns = ['firstName', 'lastName', 'username', 'type', 'disabled', 'actions'];\n    this.loadAction = UserActions.loadUsers;\n    this.reloadOnActions = [UserActions.saveUserDetailsSuccess, UserActions.changeUserPasswordSuccess];\n\n    super.ngOnInit();\n    this.loadData();\n  }\n\n  toggleStatus(item: User): void {\n    this.store.dispatch(\n      ConfirmationDialogActions.show({\n        data: {\n          template: `\n            Are you sure you want to ${item.disabled ? 'enable' : 'disable'}\n            <strong>${item.firstName} ${item.lastName}</strong>?\n          `,\n          confirm: {\n            label: item.disabled ? 'Enable' : 'Disable',\n            color: item.disabled ? 'primary' : 'warn',\n          },\n        },\n        ok: () => {\n          this.store.dispatch(UserActions.saveUserDetails({ data: { ...item, disabled: !item.disabled } }));\n        },\n      })\n    );\n  }\n\n  save(user: UserModel | null): void {\n    const dialogRef = this.dialog.open(UserFormComponent, {\n      data: { user },\n    });\n\n    dialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed && confirmed !== false) {\n        this.store.dispatch(UserActions.saveUserDetails({ data: confirmed }));\n      }\n    });\n  }\n\n  changeUserPassword(user: UserModel): void {\n    const dialogRef = this.dialog.open(UserPasswordFormComponent, {\n      data: { user },\n    });\n\n    dialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed && confirmed !== false) {\n        this.store.dispatch(UserActions.changeUserPassword({ data: confirmed }));\n      }\n    });\n  }\n}\n","<dib-wrapper-main>\n  <dib-breadcrumbs>\n    <dib-breadcrumb label=\"Dashboard\" route=\"/\"></dib-breadcrumb>\n    <dib-breadcrumb label=\"Users\" route=\"/users\"></dib-breadcrumb>\n  </dib-breadcrumbs>\n\n  <dib-wrapper-listing>\n    <ng-container slot=\"hidden-columns-message\">\n      <span class=\"hidden sm:block\">* Some columns are hidden due to small screen size</span>\n    </ng-container>\n\n    <ng-container slot=\"filters\">\n      <mat-form-field>\n        <mat-label>Filter by type</mat-label>\n        <mat-select (selectionChange)=\"debouncedFilter('type', $event.value)\">\n          <mat-option>Show All</mat-option>\n          <mat-option *ngFor=\"let type of userTypes\" [disabled]=\"!(loggedInUser$ | async).hasPermissionToUpdate(type)\" [value]=\"type\">\n            {{ type }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Filter</mat-label>\n        <input matInput (keyup)=\"debouncedFilter('search', $event.target.value)\" autocomplete=\"off\" />\n      </mat-form-field>\n    </ng-container>\n\n    <ng-container slot=\"total\">\n      <dib-wrapper-listing-total [total]=\"(users$ | async).pagination?.totalElements\"></dib-wrapper-listing-total>\n    </ng-container>\n\n    <ng-container slot=\"actions\">\n      <button mat-stroked-button (click)=\"save(null)\">Add User</button>\n    </ng-container>\n\n    <ng-container slot=\"table\">\n      <table\n        mat-table\n        matSort\n        (matSortChange)=\"onSortChange($event)\"\n        [matSortActive]=\"sortActive\"\n        [matSortDirection]=\"sortDirection\"\n        matSortDisableClear\n        [dataSource]=\"dataSource\"\n        class=\"whitespace-nowrap\"\n      >\n        <ng-container matColumnDef=\"firstName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.firstName }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"lastName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Name</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.lastName }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"username\">\n          <th class=\"sm:hidden\" mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\n          <td class=\"whitespace-normal break-all pr-2 sm:hidden\" mat-cell *matCellDef=\"let row\">{{ row.username }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"type\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Type</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.type }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"disabled\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <span class=\"flex items-center text-xs\" [class.text-gray-400]=\"!row.disabled\">\n              <span class=\"material-icons mr-1 text-xs text-gray-200\" [class.text-red-600]=\"row.disabled\">circle</span>\n              {{ row.disabled ? 'Disabled' : 'Enabled' }}\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"loader\">\n          <th colspan=\"6\" mat-header-cell *matHeaderCellDef>\n            <div *ngIf=\"(users$ | async).loading\">\n              <mat-progress-bar mode=\"indeterminate\" class=\"absolute\"></mat-progress-bar>\n            </div>\n          </th>\n        </ng-container>\n\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef></th>\n          <td mat-cell *matCellDef=\"let row\" class=\"text-right\">\n            <ng-container *ngIf=\"(loggedInUser$ | async).hasPermissionToUpdate(row.type)\">\n              <button\n                mat-icon-button\n                color=\"accent\"\n                (click)=\"toggleStatus(row)\"\n                [matTooltip]=\"row.disabled ? 'Enable user' : 'Disable user'\"\n                matTooltipPosition=\"left\"\n              >\n                <span class=\"material-icons\">\n                  {{ row.disabled ? 'check_circle_outline' : 'hide_source' }}\n                </span>\n              </button>\n              <button\n                mat-icon-button\n                color=\"accent\"\n                (click)=\"changeUserPassword(row)\"\n                matTooltip=\"Change password\"\n                matTooltipPosition=\"left\"\n              >\n                <span class=\"material-icons\">lock</span>\n              </button>\n              <button mat-icon-button color=\"accent\" (click)=\"save(row)\" matTooltip=\"Edit user details\" matTooltipPosition=\"left\">\n                <span class=\"material-icons\">create</span>\n              </button>\n            </ng-container>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"columns\"></tr>\n        <tr mat-header-row *matHeaderRowDef=\"['loader']\"></tr>\n        <tr mat-row *matRowDef=\"let myRowData; columns: columns\"></tr>\n        <tr *matNoDataRow class=\"whitespace-normal\">\n          <td [colSpan]=\"columns.length\" class=\"border-b p-6 text-center\">\n            <ng-container *ngIf=\"(users$ | async).loading; else noData\">\n              Loading data. This can take a few seconds, please be patient.\n            </ng-container>\n            <ng-template #noData> No records found. Please refine your search and try again. </ng-template>\n          </td>\n        </tr>\n      </table>\n    </ng-container>\n\n    <ng-container slot=\"pagination\">\n      <mat-paginator\n        *ngIf=\"(users$ | async).pagination\"\n        [length]=\"(users$ | async).pagination.totalElements\"\n        [pageIndex]=\"(users$ | async).pagination.number\"\n        [pageSize]=\"(users$ | async).pagination.size\"\n        (page)=\"onPageChange()\"\n      ></mat-paginator>\n    </ng-container>\n  </dib-wrapper-listing>\n</dib-wrapper-main>\n","import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { CommonModule } from '@angular/common';\nimport { EffectsModule } from '@ngrx/effects';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { routing } from './users.routing';\nimport { UsersComponent } from './users.component';\nimport { UserEffects } from '../effects/user.effects';\nimport { UserFormComponent } from './user-form.component';\nimport { UserPasswordFormComponent } from './user-password-form.component';\nimport { BreadcrumbsModule } from '../global/breadcrumbs/breadcrumbs.module';\nimport { WrapperListingModule } from '../global/wrapper/listing/wrapper-listing.module';\nimport { WrapperMainModule } from '../global/wrapper/main/wrapper-main.module';\nimport { DialogModule } from '../global/dialog/dialog.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    routing,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    EffectsModule.forFeature([UserEffects, UserEffects]),\n    MatSelectModule,\n    MatDialogModule,\n    FormsModule,\n    MatInputModule,\n    MatSlideToggleModule,\n    ReactiveFormsModule,\n    BreadcrumbsModule,\n    WrapperListingModule,\n    MatTooltipModule,\n    WrapperMainModule,\n    DialogModule,\n  ],\n  declarations: [UsersComponent, UsersComponent, UserFormComponent, UserPasswordFormComponent],\n  providers: [],\n})\nexport class UsersModule {}\n","import { Routes, RouterModule } from '@angular/router';\nimport { UsersComponent } from './users.component';\nimport { AuthGuard } from '../auth/auth.guard';\nimport { AdminGuard } from '../auth/admin.guard';\n\nconst routes: Routes = [\n  { path: '', component: UsersComponent, canActivate: [AuthGuard, AdminGuard], data: { title: 'Console Users' } },\n];\n\nexport const routing = RouterModule.forChild(routes);\n"],"names":["Injector","UserActions","UserType","selectUsers","selectUsersData","UserFormComponent","ConfirmationDialogActions","UserPasswordFormComponent","loggedInUser","BaseListingComponent","i0","UsersComponent","constructor","injector","dialog","AGENT","ADMIN","SUPER_ADMIN","store","select","ngOnInit","sortActive","sortDirection","columns","loadAction","loadUsers","reloadOnActions","saveUserDetailsSuccess","changeUserPasswordSuccess","loadData","toggleStatus","item","dispatch","show","data","template","disabled","firstName","lastName","confirm","label","color","ok","saveUserDetails","save","user","dialogRef","open","afterClosed","subscribe","confirmed","changeUserPassword","selectors","features","decls","vars","consts","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}